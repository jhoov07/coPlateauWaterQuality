c<-read.csv("./02_Data/Raw_Data/WQP/00_archive/Ca.csv", na.strings = "NULL")
d<-read.csv("./02_Data/Raw_Data/WQP/00_archive/Iron.csv", na.strings = "NULL")
e<-read.csv("./02_Data/Raw_Data/WQP/00_archive/ph.csv", na.strings = "NULL")
f<-read.csv("./02_Data/Raw_Data/WQP/00_archive/alkalinity.csv", na.strings = "NULL")
g<-read.csv("./02_Data/Raw_Data/WQP/00_archive/CO_Uranium.csv", na.strings = "NULL")
h<-read.csv("./02_Data/Raw_Data/WQP/00_archive/UT_Uranium.csv", na.strings = "NULL")
u<-rbind(a,b,g,h)
#Process uranium data (done)
u2 <- u %>%
drop_na(ResultMeasureMeasureUnitCode) %>%
filter(ResultSampleFractionText == "Dissolved") %>%
filter(ResultMeasureMeasureUnitCode != "ratio") %>%
filter(CharacteristicName == "U")
summary(factor(u2$ResultMeasureMeasureUnitCode)) #Check to see what units are noted in the field
mgL_indices <- which(u2$ResultMeasureMeasureUnitCode == "pCi/L") #Create an index with records that we need to convert
u2$ResultMeasureValue[mgL_indices] <- u2$ResultMeasureValue[mgL_indices] * 0.67 #Convert to pCi/L to ug/L match NN Wells analyte data
u2$ResultMeasureMeasureUnitCode <- "ug/L"   # made all units mg/L
#Calcium: keep mg/L (done)
c2 <- c %>%
drop_na(ResultMeasureMeasureUnitCode) %>%
filter(ResultSampleFractionText == "Dissolved")
summary(factor(c2$ResultMeasureMeasureUnitCode)) #Check to see what units are noted in the field
mgL_indices <- which(c2$ResultMeasureMeasureUnitCode == "ug/l" | c2$ResultMeasureMeasureUnitCode == "ug/L") #Create an index with records that we need to convert
c2$ResultMeasureValue[mgL_indices] <- c2$ResultMeasureValue[mgL_indices] / 1000 #Convert to mg/L to match NN Wells analyte data
c2$ResultMeasureMeasureUnitCode <- "mg/L"   # made all units mg/L
#Iron: unit conversions (done)
d2 <- d %>%
drop_na(ResultMeasureMeasureUnitCode) %>%
filter(ResultSampleFractionText == "Dissolved") %>%
filter(CharacteristicName == "Fe") #remove Ferric ion, Ferrous ion, and Iron-59
summary(factor(d2$ResultMeasureMeasureUnitCode)) #Check to see what units are noted in the field
mgL_indices <- which(d2$ResultMeasureMeasureUnitCode == "mg/l" | d2$ResultMeasureMeasureUnitCode == "mg/L") #Create an index with records that we need to convert
d2$ResultMeasureValue[mgL_indices] <- d2$ResultMeasureValue[mgL_indices] * 1000 #Convert to ug/L to match NN Wells analyte data
d2$ResultMeasureMeasureUnitCode <- "ug/L"   # made all units ug/L
#pH - check that all measurements are in standard units (done)
e2 <- e %>%
drop_na(ResultMeasureMeasureUnitCode) %>%
filter(ResultSampleFractionText == "Total")
#summary(factor(e2$ResultMeasureMeasureUnitCode))
#Alkalinity: convert ug/L to mg/L in ResultMeasureMeasureUnitCode (done)
f2 <- f %>%
drop_na(ResultMeasureMeasureUnitCode) %>%   #Remove rows with NA's using drop_na()
filter(ResultSampleFractionText == "Total") %>% #filter to total results since we want to use raw water samples
filter(CharacteristicName == "Alkalinity")
summary(factor(f2$ResultMeasureMeasureUnitCode)) #Check to see what units are noted in the field
mgL_indices <- which(f2$ResultMeasureMeasureUnitCode == "ug/l") #Create an index with records that we need to convert
f2$ResultMeasureValue[mgL_indices] <- f2$ResultMeasureValue[mgL_indices] / 1000 #Convert to ug/L to match NN Wells analyte data
f2$ResultMeasureMeasureUnitCode <- "mg/L"   # made all units mg/L
#Merge files
cdef<-rbind(c2,d2,e2,f2, u2)
cdef2 <- cdef %>%
filter(StateCode == 4 & (CountyCode == 1 | CountyCode == 5 | CountyCode == 7 | CountyCode == 15 | CountyCode == 17 | CountyCode == 25) |
(StateCode == 35 & (CountyCode == 3 | CountyCode ==6 | CountyCode ==31 | CountyCode ==39 | CountyCode ==43 | CountyCode ==45)) |
(StateCode == 08 & (CountyCode == 29 | CountyCode == 33 | CountyCode == 45 | CountyCode ==67 | CountyCode ==77 | CountyCode ==81 | CountyCode ==83 | CountyCode ==85 | CountyCode ==91 | CountyCode ==103 | CountyCode ==113)) |
(StateCode == 49 & (CountyCode == 1 | CountyCode == 7 | CountyCode ==13 | CountyCode ==15 | CountyCode ==17 | CountyCode == 19 | CountyCode ==21 | CountyCode ==23 | CountyCode ==25 | CountyCode ==27 | CountyCode ==31 | CountyCode == 37 | CountyCode ==39 | CountyCode ==41 | CountyCode ==47 | CountyCode ==49 | CountyCode ==51 | CountyCode == 53 | CountyCode ==55)))
#convert to wide format
wide<-dcast(cdef2, SiteID~CharacteristicName+ResultMeasureMeasureUnitCode, value.var="ResultMeasureValue", median)
View(wide)
#convert to wide format
wide<-dcast(cdef2, SiteID~CharacteristicName, value.var="ResultMeasureValue", median)
View(wide)
#Read GIS data from WQP
i<-read.csv("./02_Data/Raw_Data/WQP/00_archive/20241029_WQP_Export.csv", na.strings = "NULL")
View(i)
#Clean up new dataframe, drop worthless fields
cleani<- i [-c(2:25,27:79)]
View(cleani)
#class(cleani[["SiteID"]])
#class(wide[["SiteID"]])
#Merge with wide using SiteID
WQP_All<-merge(wide, cleani, by="SiteID", all.x=TRUE)
View(WQP_All)
View(WQP_All)
View(WQP_All)
#class(cleani[["SiteID"]])
#class(wide[["SiteID"]])
#Merge with wide using SiteID
WQP_All<-merge(wide, cleani, by="SiteID", all.y=TRUE)
#class(cleani[["SiteID"]])
#class(wide[["SiteID"]])
#Merge with wide using SiteID
WQP_All<-merge(wide, cleani, by="SiteID", all.x=TRUE)
?distinct
#Return unique records
yourDataFrame <- i %>%
distinct(cleani .keep_all = TRUE)
#Return unique records
yourDataFrame <- i %>%
distinct(cleani, .keep_all = TRUE)
#Return unique records
df <- i %>%
distinct(cleani[, 1:155], .keep_all = TRUE)
#Return unique records
df <- i %>%
distinct(cleani[, 1:155])
#Return unique records
df <- i %>%
distinct(cleani[, 1:155], .keep_all = FALSE)
#Return unique records
cleanNoDup<-distinct(cleani)
View(cleanNoDup)
#Return unique records
cleanNoDup<-distinct(cleani[,c(2:155)])
View(cleanNoDup)
#class(cleani[["SiteID"]])
#class(wide[["SiteID"]])
#Merge with wide using SiteID
WQP_All<-merge(wide, cleani, by="SiteID", all.x=TRUE)
View(WQP_All)
#class(cleani[["SiteID"]])
#class(wide[["SiteID"]])
#Merge with wide using SiteID
WQP_All<-merge(wide, cleanNoDup, by="SiteID", all.x=TRUE)
View(WQP_All)
version()
version
library(caTools)
library(randomForest)
library(caret)
library(tidyverse)
setwd("/Users/hoover/Documents/GitHub/coPlateauWaterQuality/03_data/")
rm(list=ls())
#Load data
Asdata <- read.csv("All_As_Data.csv")
getwd()
classifier_RF<-readRDS("2024-11-25_classLTE10_cv10_rf.rds")
test <- Asdata2[Asdata2$trainCat2 == FALSE, ] #Need up update this field and dataframe to match what is produce in lines 21-24
# Filter data into train and test sets based on logical variable 'trainCat2'
#train <- Asdata2[Asdata2$trainCat2 == TRUE, ] #Need up update this field and dataframe to match what is produce in lines 21-24
test <- Asdata[Asdata$trainCat2 == FALSE, ] #Need up update this field and dataframe to match what is produce in lines 21-24
View(Asdata)
# Filter data into train and test sets based on logical variable 'trainCat2'
#train <- Asdata2[Asdata2$trainCat2 == TRUE, ] #Need up update this field and dataframe to match what is produce in lines 21-24
test <- Asdata[Asdata$trainClassLTE10_splt == FALSE, ] #Need up update this field and dataframe to match what is produce in lines 21-24
#Make SiteID the row name so we can drop that field
#rownames(train)<-train$SiteID
rownames(test)<-test$SiteID
#Drop unused fields
#AsTrain<-train[,-c(1, 4, 109:112, 158:163)] #Drop the As concentration, and the categorical variables we already transformed
AsTest<-test[,-c(1, 4, 109:112, 157:160, 162:168)]
#Ensure ClassLTE1 is a Factor (Categorical Variable)
#AsTrain$ClassLTE1 <- as.factor(AsTrain$ClassLTE1)
AsTest$ClassLTE10  <- as.factor(AsTest$ClassLTE1o)
#Ensure ClassLTE1 is a Factor (Categorical Variable)
#AsTrain$ClassLTE1 <- as.factor(AsTrain$ClassLTE1)
AsTest$ClassLTE10  <- as.factor(AsTest$ClassLTE10)
classifier_RF
# Predicting the Test set results
y_pred <- predict(classifier_RF, newdata = AsTest)
# Confusion Matrix
confusion_mtx <- confusionMatrix(y_pred, AsTest$ClassLTE1)
confusion_mtx
# Plotting model
plot(classifier_RF)
# Calculate Accuracy
accuracy <- confusion_mtx$overall['Accuracy']
accuracy
# Calculate kappa value
kappa_value <- confusion_mtx$overall['Kappa']
kappa_value
# Extract Sensitivity and Specificity for each class
sensitivity <- confusion_mtx$byClass[[1]]
sensitivity
specificity <- confusion_mtx$byClass[[2]]
specificity
# training data accuracy and kappa
# AvgAcc = accuracy  Avgkap = kappa
classifier_RF$resample %>%
arrange(Resample) %>%
mutate(AvgAcc = mean(Accuracy)) %>%
mutate(Avgkap = mean(Kappa))
# Test data values
accuracy
kappa_value
sensitivity
specificity
importance <- varImp(classifier_RF, scale = FALSE)
importance <- varImp(classifier_RF, scale = TRUE)
# Plot variable importance
plot(importance, top = 10, col = "blue",  main = "Random Forest Classification")
importance$importance
# training data accuracy and kappa
# AvgAcc = accuracy  Avgkap = kappa
classifier_RF$resample %>%
arrange(Resample) %>%
mutate(AvgAcc = mean(Accuracy)) %>%
mutate(Avgkap = mean(Kappa))
# training data accuracy and kappa
# AvgAcc = accuracy  Avgkap = kappa
classifier_RF$resample %>%
arrange(Resample) %>%
mutate(AvgAcc = mean(Accuracy)) %>%
mutate(Avgkap = mean(Kappa)) %>%
mutate(AvgSen = mean(sensitivity)) %>%
mutate(AvgSpec = mean(specificity))
rm(list=ls())
#Load data
Asdata <- read.csv("All_As_Data.csv")
classifier_RF<-readRDS("2024-11-25_classLTE5_cv10_rf.rds")
# Filter data into train and test sets based on logical variable 'trainCat2'
#train <- Asdata2[Asdata2$trainCat2 == TRUE, ] #Need up update this field and dataframe to match what is produce in lines 21-24
test <- Asdata[Asdata$trainClassLTE5_splt == FALSE, ] #Need up update this field and dataframe to match what is produce in lines 21-24
#Make SiteID the row name so we can drop that field
rownames(test)<-test$SiteID
#Drop unused fields
#AsTrain<-train[,-c(1, 4, 109:112, 158:163)] #Drop the As concentration, and the categorical variables we already transformed
AsTest<-test[,-c(1, 4, 109:112, 157:159, 161:168)]
#Ensure ClassLTE1 is a Factor (Categorical Variable)
#AsTrain$ClassLTE1 <- as.factor(AsTrain$ClassLTE1)
AsTest$ClassLTE5  <- as.factor(AsTest$ClassLTE5)
classifier_RF
# Predicting the Test set results
y_pred <- predict(classifier_RF, newdata = AsTest)
# Confusion Matrix
confusion_mtx <- confusionMatrix(y_pred, AsTest$ClassLTE1)
confusion_mtx
# Predicting the Test set results
y_pred <- predict(classifier_RF, newdata = AsTest)
# Confusion Matrix
confusion_mtx <- confusionMatrix(y_pred, AsTest$ClassLTE5)
confusion_mtx
# Plotting model
plot(classifier_RF)
# training data accuracy and kappa
# AvgAcc = accuracy  Avgkap = kappa
classifier_RF$resample %>%
arrange(Resample) %>%
mutate(AvgAcc = mean(Accuracy)) %>%
mutate(Avgkap = mean(Kappa)) %>%
mutate(AvgSen = mean(sensitivity)) %>%
mutate(AvgSpec = mean(specificity))
# Plotting model
plot(classifier_RF)
# Calculate Accuracy
accuracy <- confusion_mtx$overall['Accuracy']
accuracy
# Calculate kappa value
kappa_value <- confusion_mtx$overall['Kappa']
kappa_value
# Extract Sensitivity and Specificity for each class
sensitivity <- confusion_mtx$byClass[[1]]
sensitivity
specificity <- confusion_mtx$byClass[[2]]
specificity
# training data accuracy and kappa
# AvgAcc = accuracy  Avgkap = kappa
classifier_RF$resample %>%
arrange(Resample) %>%
mutate(AvgAcc = mean(Accuracy)) %>%
mutate(Avgkap = mean(Kappa)) %>%
mutate(AvgSen = mean(sensitivity)) %>%
mutate(AvgSpec = mean(specificity))
rm(list=ls())
rm(list=ls())
#Load data
Asdata <- read.csv("All_As_Data.csv")
classifier_RF<-readRDS("2024-11-25_classLTE10_cv10_rf.rds")
# Filter data into train and test sets based on logical variable 'trainCat2'
#train <- Asdata2[Asdata2$trainCat2 == TRUE, ] #Need up update this field and dataframe to match what is produce in lines 21-24
test <- Asdata[Asdata$trainClassLTE10_splt == FALSE, ] #Need up update this field and dataframe to match what is produce in lines 21-24
#Make SiteID the row name so we can drop that field
rownames(test)<-test$SiteID
#Drop unused fields
#AsTrain<-train[,-c(1, 4, 109:112, 158:163)] #Drop the As concentration, and the categorical variables we already transformed
#AsTest<-test[,-c(1, 4, 109:112, 157:159, 161:168)]  #LTE5
AsTest<-test[,-c(1, 4, 109:112, 157:160, 162:168)]  #LTE10
#Ensure ClassLTE1 is a Factor (Categorical Variable)
#AsTrain$ClassLTE1 <- as.factor(AsTrain$ClassLTE1)
#AsTest$ClassLTE5  <- as.factor(AsTest$ClassLTE5)
AsTest$ClassLTE10  <- as.factor(AsTest$ClassLTE10)
# Predicting the Test set results
y_pred <- predict(classifier_RF, newdata = AsTest)
# Confusion Matrix
confusion_mtx <- confusionMatrix(y_pred, AsTest$ClassLTE10)
confusion_mtx
# Plotting model
plot(classifier_RF)
# Calculate Accuracy
accuracy <- confusion_mtx$overall['Accuracy']
accuracy
# Calculate kappa value
kappa_value <- confusion_mtx$overall['Kappa']
kappa_value
# Extract Sensitivity and Specificity for each class
sensitivity <- confusion_mtx$byClass[[1]]
sensitivity
specificity <- confusion_mtx$byClass[[2]]
specificity
# training data accuracy and kappa
# AvgAcc = accuracy  Avgkap = kappa
classifier_RF$resample %>%
arrange(Resample) %>%
mutate(AvgAcc = mean(Accuracy)) %>%
mutate(Avgkap = mean(Kappa)) %>%
mutate(AvgSen = mean(sensitivity)) %>%
mutate(AvgSpec = mean(specificity))
classifier_RF
rm(list=ls())
#Load data
Asdata <- read.csv("All_As_Data.csv")
classifier_RF<-readRDS("2024-11-25_classLTE3_cv10_rf.rds")
# Filter data into train and test sets based on logical variable 'trainCat2'
#train <- Asdata2[Asdata2$trainCat2 == TRUE, ] #Need up update this field and dataframe to match what is produce in lines 21-24
test <- Asdata[Asdata$trainClassLTE_splt == FALSE, ] #Need up update this field and dataframe to match what is produce in lines 21-24
# Filter data into train and test sets based on logical variable 'trainCat2'
#train <- Asdata2[Asdata2$trainCat2 == TRUE, ] #Need up update this field and dataframe to match what is produce in lines 21-24
test <- Asdata[Asdata$trainClassLTE3_splt == FALSE, ] #Need up update this field and dataframe to match what is produce in lines 21-24
rm(list=ls())
#Load data
Asdata <- read.csv("All_As_Data.csv")
classifier_RF<-readRDS("2024-11-25_classLTE3_cv10_rf.rds")
# Filter data into train and test sets based on logical variable 'trainCat2'
#train <- Asdata2[Asdata2$trainCat2 == TRUE, ] #Need up update this field and dataframe to match what is produce in lines 21-24
test <- Asdata[Asdata$trainClassLTE3_splt == FALSE, ] #Need up update this field and dataframe to match what is produce in lines 21-24
#Make SiteID the row name so we can drop that field
rownames(test)<-test$SiteID
#Drop unused fields
#AsTrain<-train[,-c(1, 4, 109:112, 158:163)] #Drop the As concentration, and the categorical variables we already transformed
AsTest<-test[,-c(1, 4, 109:112, 157:158, 160:168)]  #LTE5
View(AsTest)
#Ensure ClassLTE1 is a Factor (Categorical Variable)
#AsTrain$ClassLTE1 <- as.factor(AsTrain$ClassLTE1)
AsTest$ClassLTE3  <- as.factor(AsTest$ClassLTE3)
classifier_RF
y_pred <- predict(classifier_RF, newdata = AsTest)
# Confusion Matrix
confusion_mtx <- confusionMatrix(y_pred, AsTest$ClassLTE10)
# Predicting the Test set results
y_pred <- predict(classifier_RF, newdata = AsTest)
# Confusion Matrix
confusion_mtx <- confusionMatrix(y_pred, AsTest$ClassLTE10)
# Confusion Matrix
confusion_mtx <- confusionMatrix(y_pred, AsTest$ClassLTE3)
confusion_mtx
# Plotting model
plot(classifier_RF)
# Calculate Accuracy
accuracy <- confusion_mtx$overall['Accuracy']
accuracy
# Calculate kappa value
kappa_value <- confusion_mtx$overall['Kappa']
kappa_value
# Extract Sensitivity and Specificity for each class
sensitivity <- confusion_mtx$byClass[[1]]
sensitivity
specificity <- confusion_mtx$byClass[[2]]
specificity
# training data accuracy and kappa
# AvgAcc = accuracy  Avgkap = kappa
classifier_RF$resample %>%
arrange(Resample) %>%
mutate(AvgAcc = mean(Accuracy)) %>%
mutate(Avgkap = mean(Kappa)) %>%
mutate(AvgSen = mean(sensitivity)) %>%
mutate(AvgSpec = mean(specificity))
rm(list=ls())
#Load data
Asdata <- read.csv("All_As_Data.csv")
classifier_RF<-readRDS("2024-11-25_classLTE2_cv10_rf.rds")
# Filter data into train and test sets based on logical variable 'trainCat2'
#train <- Asdata2[Asdata2$trainCat2 == TRUE, ] #Need up update this field and dataframe to match what is produce in lines 21-24
test <- Asdata[Asdata$trainClassLTE2_splt == FALSE, ] #Need up update this field and dataframe to match what is produce in lines 21-24
#Make SiteID the row name so we can drop that field
rownames(test)<-test$SiteID
#Drop unused fields
#AsTrain<-train[,-c(1, 4, 109:112, 158:163)] #Drop the As concentration, and the categorical variables we already transformed
AsTest<-test[,-c(1, 4, 109:112, 157, 159:168)]  #LTE2
#Ensure ClassLTE1 is a Factor (Categorical Variable)
#AsTrain$ClassLTE1 <- as.factor(AsTrain$ClassLTE1)
AsTest$ClassLTE2  <- as.factor(AsTest$ClassLTE2)
classifier_RF
# Predicting the Test set results
y_pred <- predict(classifier_RF, newdata = AsTest)
# Confusion Matrix
confusion_mtx <- confusionMatrix(y_pred, AsTest$ClassLTE2)
confusion_mtx
# Plotting model
plot(classifier_RF)
# Calculate Accuracy
accuracy <- confusion_mtx$overall['Accuracy']
accuracy
# Calculate kappa value
kappa_value <- confusion_mtx$overall['Kappa']
kappa_value
# Extract Sensitivity and Specificity for each class
sensitivity <- confusion_mtx$byClass[[1]]
sensitivity
specificity <- confusion_mtx$byClass[[2]]
specificity
# training data accuracy and kappa
# AvgAcc = accuracy  Avgkap = kappa
classifier_RF$resample %>%
arrange(Resample) %>%
mutate(AvgAcc = mean(Accuracy)) %>%
mutate(Avgkap = mean(Kappa)) %>%
mutate(AvgSen = mean(sensitivity)) %>%
mutate(AvgSpec = mean(specificity))
rm(list=ls())
#Load data
Asdata <- read.csv("All_As_Data.csv")
classifier_RF<-readRDS("2024-11-25_classLTE1_cv10_rf.rds")
# Filter data into train and test sets based on logical variable 'trainCat2'
#train <- Asdata2[Asdata2$trainCat2 == TRUE, ] #Need up update this field and dataframe to match what is produce in lines 21-24
test <- Asdata[Asdata$trainClassLTE1_splt == FALSE, ] #Need up update this field and dataframe to match what is produce in lines 21-24
#Make SiteID the row name so we can drop that field
rownames(test)<-test$SiteID
rm(list=ls())
#Load data
Asdata <- read.csv("All_As_Data.csv")
classifier_RF<-readRDS("2024-11-25_classLTE1_cv10_rf.rds")
# Filter data into train and test sets based on logical variable 'trainCat2'
#train <- Asdata2[Asdata2$trainCat2 == TRUE, ] #Need up update this field and dataframe to match what is produce in lines 21-24
test <- Asdata[Asdata$trainClassLTE1_splt == FALSE, ] #Need up update this field and dataframe to match what is produce in lines 21-24
#Make SiteID the row name so we can drop that field
rownames(test)<-test$SiteID
#Drop unused fields
AsTrain<-train[,-c(1, 4, 109:112, 158:163)] #Drop the As concentration, and the categorical variables we already transformed
#Drop unused fields
AsTrain<-train[,-c(1, 4, 109:112, 158:168)] #Drop the As concentration, and the categorical variables we already transformed
#Drop unused fields
AsTest<-train[,-c(1, 4, 109:112, 158:168)] #Drop the As concentration, and the categorical variables we already transformed
#Drop unused fields
AsTest<-test[,-c(1, 4, 109:112, 158:168)] #Drop the As concentration, and the categorical variables we already transformed
#Ensure ClassLTE1 is a Factor (Categorical Variable)
AsTest$ClassLTE1 <- as.factor(AsTest$ClassLTE1)
classifier_RF
y_pred <- predict(classifier_RF, newdata = AsTest)
# Confusion Matrix
confusion_mtx <- confusionMatrix(y_pred, AsTest$ClassLTE2)
# Predicting the Test set results
y_pred <- predict(classifier_RF, newdata = AsTest)
# Confusion Matrix
confusion_mtx <- confusionMatrix(y_pred, AsTest$ClassLTE1)
confusion_mtx
# Plotting model
plot(classifier_RF)
# Calculate Accuracy
accuracy <- confusion_mtx$overall['Accuracy']
accuracy
# Calculate kappa value
kappa_value <- confusion_mtx$overall['Kappa']
kappa_value
# Extract Sensitivity and Specificity for each class
sensitivity <- confusion_mtx$byClass[[1]]
sensitivity
specificity <- confusion_mtx$byClass[[2]]
specificity
# training data accuracy and kappa
# AvgAcc = accuracy  Avgkap = kappa
classifier_RF$resample %>%
arrange(Resample) %>%
mutate(AvgAcc = mean(Accuracy)) %>%
mutate(Avgkap = mean(Kappa)) %>%
mutate(AvgSen = mean(sensitivity)) %>%
mutate(AvgSpec = mean(specificity))
importance <- varImp(classifier_RF, scale = TRUE)
# Plot variable importance
plot(importance, top = 10, col = "blue",  main = "Random Forest Classification")
rm(list=ls())
#Load data
Asdata <- read.csv("All_As_Data.csv")
classifier_RF<-readRDS("2024-11-25_classLTE5_cv10_rf.rds")
# Filter data into train and test sets based on logical variable 'trainCat2'
#train <- Asdata2[Asdata2$trainCat2 == TRUE, ] #Need up update this field and dataframe to match what is produce in lines 21-24
test <- Asdata[Asdata$trainClassLTE5_splt == FALSE, ] #Need up update this field and dataframe to match what is produce in lines 21-24
#Make SiteID the row name so we can drop that field
rownames(test)<-test$SiteID
#Drop unused fields
#AsTest<-test[,-c(1, 4, 109:112, 158:168)] #Drop the As concentration, and the categorical variables we already transformed
#AsTest<-test[,-c(1, 4, 109:112, 157, 159:168)]  #LTE2
#AsTest<-test[,-c(1, 4, 109:112, 157:158, 160:168)]  #LTE3
AsTest<-test[,-c(1, 4, 109:112, 157:159, 161:168)]  #LTE5
#Ensure ClassLTE1 is a Factor (Categorical Variable)
#AsTest$ClassLTE1 <- as.factor(AsTest$ClassLTE1)
#AsTest$ClassLTE2  <- as.factor(AsTest$ClassLTE2)
#AsTest$ClassLTE3  <- as.factor(AsTest$ClassLTE3)
AsTest$ClassLTE5  <- as.factor(AsTest$ClassLTE5)
classifier_RF
# Predicting the Test set results
y_pred <- predict(classifier_RF, newdata = AsTest)
# Confusion Matrix
confusion_mtx <- confusionMatrix(y_pred, AsTest$ClassLTE5)
confusion_mtx
# Plotting model
plot(classifier_RF)
# Calculate Accuracy
accuracy <- confusion_mtx$overall['Accuracy']
accuracy
# Calculate kappa value
kappa_value <- confusion_mtx$overall['Kappa']
kappa_value
# Extract Sensitivity and Specificity for each class
sensitivity <- confusion_mtx$byClass[[1]]
sensitivity
specificity <- confusion_mtx$byClass[[2]]
specificity
# training data accuracy and kappa
# AvgAcc = accuracy  Avgkap = kappa
classifier_RF$resample %>%
arrange(Resample) %>%
mutate(AvgAcc = mean(Accuracy)) %>%
mutate(Avgkap = mean(Kappa)) %>%
mutate(AvgSen = mean(sensitivity)) %>%
mutate(AvgSpec = mean(specificity))
# Test data values
accuracy
kappa_value
sensitivity
specificity
importance <- varImp(classifier_RF, scale = TRUE)
# Plot variable importance
plot(importance, top = 10, col = "blue",  main = "Random Forest Classification")
