## ----list-files-tif--------------------------------------------------
rasterlist2 <-  list.files(paste0(wd,"tifsForModeling"), full.names=TRUE, pattern=".tif$")
## ----list-files-tif--------------------------------------------------
rasterlist2 <-  list.files(paste0(wd,"tifsForModeling"), full.names=TRUE, pattern=".tif$")
rasterlist2
#Spatial prediction
wd <- ("/Users/hoover/desktop/tifsForModeling")
## ----list-files-tif--------------------------------------------------
rasterlist2 <-  list.files(wd, full.names=TRUE, pattern=".tif$")
rasterlist2
#Load each raster to check extent and crop as needed
A_Aragon<-rast(paste(wd,"A_Aragon_500m.tif"))
#Load each raster to check extent and crop as needed
A_Aragon<-rast(paste(wd,"/A_Aragon_500m.tif"))
#Load each raster to check extent and crop as needed
A_Aragon<-rast(paste(wd,"A_Aragon_500m.tif"))
#Load each raster to check extent and crop as needed
A_Aragon<-rast(paste(wd,"A_Aragon_500m.tif", sept=""))
#Load each raster to check extent and crop as needed
A_Aragon<-rast(paste(wd,"A_Aragon_500m.tif", sept=""))
wd
#Spatial prediction
wd <- ("/Users/hoover/desktop/tifsForModeling/")
wd
#Load each raster to check extent and crop as needed
A_Aragon<-rast(paste(wd,"A_Aragon_500m.tif", sept=""))
#Load each raster to check extent and crop as needed
A_Aragon<-rast(paste(wd,"A_Aragon_500m.tif", sep=""))
A_Calcite<-rast(paste(wd, "A_Calcite_500m.tif", sep="")
#Load each raster to check extent and crop as needed
A_Aragon<-rast(paste(wd,"A_Aragon_500m.tif", sep=""))
A_Calcite<-rast(paste(wd, "A_Calcite_500m.tif", sep=""))
A_Cs<-rast(paste(wd,"A_Cs_500m.tif", sep=""))
A_Calcite<-rast(paste(wd,"A_Calcite_500m.tif", sep=""))
A_Kaolinit<-rast(paste(wd,"A_Kaolinit.tif", sep=""))
A_Tl<-rast(paste(wd,"A_tl.tif", sep=""))
A_Tot_14A<-rast(paste(wd,"A_Tot_14A.tif", sep=""))
A_Tot_Flds<-rast(paste(wd,"A_Tot_Flds.tif", sep=""))
C_Analcime<-rast(paste(wd,"C_Analcime.tif", sep=""))
C_Cr<-rast(paste(wd,"C_Cr_500m.tif", sep=""))
C_Hematite<-rast(paste(wd,"C_Hematite_500m.tif", sep=""))
C_Mo<-rast(paste(wd,"C_Mo.tif", sep=""))
DepthToGW<-rast(paste(wd,"DepthToGW_V2.tif", sep=""))
Fe<-rast(aste(wd,"fe_v2.tif" , sep=""))
Fe<-rast(paste(wd,"fe_v2.tif" , sep=""))
pH<-rast(paste(wd,"pH_v2.tif" , sep=""))
prism30yr<-rast(paste(wd,"prism30yr_500m.tif", sep=""))
## ----list-files-tif--------------------------------------------------
rasterlist2 <-  list.files(wd, full.names=TRUE, pattern=".tif$")
rasterlist2
#Spatial prediction
wd <- ("/Users/hoover/desktop/tifsForModeling")
## ----list-files-tif--------------------------------------------------
rasterlist2 <-  list.files(wd, full.names=TRUE, pattern=".tif$")
rasterlist2
#Load each raster to check extent and crop as needed
A_Aragon<-rast(paste(wd,"A_Aragon_500m.tif", sep=""))
#Load each raster to check extent and crop as needed
A_Aragon<-rast(paste(wd,"/A_Aragon_500m.tif", sep=""))
rm(list=ls())
wd <- ("/Users/hoover/desktop/tifsForModeling")
## ----list-files-tif--------------------------------------------------
rasterlist2 <-  list.files(wd, full.names=TRUE, pattern=".tif$")
rasterlist2
library(terra)
#Load each raster to check extent and crop as needed
A_Aragon<-rast(paste(wd,"/A_Aragon_500m.tif", sep=""))
A_C_Tot<-rast(paste(wd,"/A_C_Tot.tif", sep=""))
A_Calcite<-rast(paste(wd, "/A_Calcite_500m.tif", sep=""))
A_Cs<-rast(paste(wd,"/A_Cs_500m.tif", sep=""))
A_Hg<-rast(paste(wd,"/A_Hg.tif", sep=""))
A_Kaolinit<-rast(paste(wd,"/A_Kaolinit.tif", sep=""))
A_Quartz<-rast(paste(wd,"/A_Quartz.tif", sep=""))
A_Tl<-rast(paste(wd,"/A_Tl.tif", sep=""))
A_Tot_14A<-rast(paste(wd,"/A_Tot_14A.tif", sep=""))
A_Tot_Flds<-rast(paste(wd,"/A_Tot_Flds.tif", sep=""))
C_Amorph<-rast(paste(wd,"C_Amorph.tif", sep=""))
C_Amorph<-rast(paste(wd,"C_Amorph.tif", sep=""))
rm(list=ls())
wd <- ("/Users/hoover/desktop/tifsForModeling")
## ----list-files-tif--------------------------------------------------
rasterlist2 <-  list.files(wd, full.names=TRUE, pattern=".tif$")
rasterlist2
library(terra)
#Load each raster to check extent and crop as needed
A_Aragon<-rast(paste(wd,"/A_Aragon_500m.tif", sep=""))
A_C_Tot<-rast(paste(wd,"/A_C_Tot.tif", sep=""))
A_Calcite<-rast(paste(wd, "/A_Calcite_500m.tif", sep=""))
A_Cs<-rast(paste(wd,"/A_Cs_500m.tif", sep=""))
A_Hg<-rast(paste(wd,"/A_Hg.tif", sep=""))
A_Kaolinit<-rast(paste(wd,"/A_Kaolinit.tif", sep=""))
A_Quartz<-rast(paste(wd,"/A_Quartz.tif", sep=""))
A_Tl<-rast(paste(wd,"/A_Tl.tif", sep=""))
A_Tot_14A<-rast(paste(wd,"/A_Tot_14A.tif", sep=""))
A_Tot_Flds<-rast(paste(wd,"/A_Tot_Flds.tif", sep=""))
C_Amorph<-rast(paste(wd,"/C_Amorph.tif", sep=""))
C_Analcime<-rast(paste(wd,"/C_Analcime.tif", sep=""))
C_Cr<-rast(paste(wd,"/C_Cr_500m.tif", sep=""))
C_Hematite<-rast(paste(wd,"/C_Hematite_500m.tif", sep=""))
C_Kaolinit<-rast(paste(wd,"/C_Kaolinit.tif", sep=""))
C_Mo<-rast(paste(wd,"/C_Mo.tif", sep=""))
C_Sb<-rast(paste(wd,"/C_Sb.tif", sep=""))
C_Se<-rast(paste(wd,"/C_Se.tif", sep=""))
C_Tot_14A<-rast(paste(wd,"/C_Tot_14A.tif", sep=""))
DepthToGW<-rast(paste(wd,"/DepthToGW_V2.tif", sep=""))
Fe<-rast(paste(wd,"/fe_v2.tif" , sep=""))
pH<-rast(paste(wd,"/pH_v2.tif" , sep=""))
prism30yr<-rast(paste(wd,"/prism30yr_500m.tif", sep=""))
Top5_As<-rast(paste(wd,"/Top5_As.tif", sep=""))
Top5_Ba<-rast(paste(wd,"/Top5_Ba.tif", sep=""))
Top5_Ca<-rast(paste(wd,"/Top5_Ca.tif", sep=""))
Top5_S<-rast(paste(wd,"/Top5_S_500m.tif", sep=""))
length(rasterlist2)
rasterlist2
## ----list-files-tif--------------------------------------------------
rasterlist2 <-  list.files(wd, full.names=FALSE, pattern=".tif$")
rasterlist2
rasterlist2
for (i in 1:length(rasterlist2)){
print(i)
}
print(rasterList2[i])
print(rasterList2[[i])
}
for (i in 1:length(rasterlist2)){
print(rasterList2[[i]])
}
print(rasterList2)
print(rasterlist2[[i]])
rasterlist2
for (i in 1:length(rasterlist2)){
print(rasterlist2[[i]])
}
for (i in 1:length(rasterlist2)){
name<-paste(rasterlist2[[i]])
print(name)
}
name
#Resample
A_Aragon<-resample(A_Aragon, Fe, method = "bilinear")
A_C_Tot<-resample(A_C_Tot, Fe, method = "bilinear")
A_Calcite<-resample(A_Calcite, Fe, method = "bilinear")
A_Cs<-resample(A_Cs, Fe, method = "bilinear")
A_Hg<-resample(A_Hg, Fe, method = "bilinear")
A_Kaolinit<-resample(A_Kaolinit, Fe, method = "bilinear")
A_Quartz<-resample(A_Quartz, Fe, method = "bilinear")
A_Tl<-resample(A_Tl, Fe, method = "bilinear")
A_Tot_14A<-resample(A_Tot_14A, Fe, method = "bilinear")
A_Tot_Flds<-resample(A_Tot_Flds, Fe, method = "bilinear")
C_Amorph<-resample(C_Amorph, Fe, method = "bilinear")
C_Analcime<-resample(C_Analcime, Fe, method = "bilinear")
C_Cr<-resample(C_Cr, Fe, method = "bilinear")
C_Hematite<-resample(C_Hematite, Fe, method = "bilinear")
C_Kaolinit<-resample(C_Kaolinit, Fe, method = "bilinear")
C_Mo<-resample(C_Mo, Fe, method = "bilinear")
C_Sb<-resample(C_Sb, Fe, method = "bilinear")
C_Se<-resample(C_Se, Fe, method = "bilinear")
C_Tot_14A<-resample(C_Tot_14A, Fe, method = "bilinear")
DepthToGW<-resample(DepthToGW, Fe, method = "bilinear")
pH<-resample(pH, Fe, method = "bilinear")
prism30yr<-resample(prism30yr, Fe, method = "bilinear")
Top5_As<-resample(Top5_As, Fe, method = "bilinear")
Top5_Ba<-resample(Top5_Ba, Fe, method = "bilinear")
Top5_Ca<-resample(Top5_Ca, Fe, method = "bilinear")
Top5_S<-resample(Top5_S, Fe, method = "bilinear")
#crop
A_Aragon<-crop(A_Aragon, Fe, mask = TRUE)
A_Aragon<-crop(A_Aragon, Fe, mask = TRUE)
A_C_Tot<-crop(A_C_Tot, Fe, mask = TRUE)
A_Calcite<-crop(A_Calcite, Fe, mask = TRUE)
A_Cs<-crop(A_Cs, Fe, mask = TRUE)
A_Hg<-crop(A_Hg, Fe, mask = TRUE)
A_Kaolinit<-crop(A_Kaolinit, Fe, mask = TRUE)
A_Quartz<-crop(A_Quartz, Fe, mask = TRUE)
A_Tl<-crop(A_Tl, Fe, mask = TRUE)
A_Tot_14A<-crop(A_Tot_14A, Fe, mask = TRUE)
A_Tot_Flds<-crop(A_Tot_Flds, Fe, mask = TRUE)
C_Amorph<-crop(C_Amorph, Fe, mask = TRUE)
C_Analcime<-crop(C_Analcime, Fe, mask = TRUE)
C_Cr<-crop(C_Cr, Fe, mask = TRUE)
C_Hematite<-crop(C_Hematite, Fe, mask = TRUE)
C_Kaolinit<-crop(C_Kaolinit, Fe, mask = TRUE)
C_Mo<-crop(C_Mo, Fe, mask = TRUE)
C_Sb<-crop(C_Sb, Fe, mask = TRUE)
C_Se<-crop(C_Se, Fe, mask = TRUE)
C_Tot_14A<-crop(C_Tot_14A, Fe, mask = TRUE)
DepthToGW<-crop(DepthToGW, Fe, mask = TRUE)
pH<-crop(pH, Fe, mask = TRUE)
prism30yr<-crop(prism30yr, Fe, mask = TRUE)
Top5_As<-crop(Top5_As, Fe, mask = TRUE)
Top5_Ba<-crop(Top5_Ba, Fe, mask = TRUE)
Top5_Ca<-crop(Top5_Ca, Fe, mask = TRUE)
Top5_S<-crop(Top5_S, Fe, mask = TRUE)
C_Kaolinit
d<-"/Users/hoover/desktop/spatialPredFormattedTifs/"
#Write cropped rasters to file
writeRaster(A_Aragon, paste(d, "A_Aragon.tif", sep=""))
rasterlist2
rm(list=ls())
wd <- ("/Users/hoover/desktop/tifsForModeling")
## ----list-files-tif--------------------------------------------------
rasterlist2 <-  list.files(wd, full.names=FALSE, pattern=".tif$")
rasterlist2
library(terra)
#Load each raster to check extent and crop as needed
A_Aragon<-rast(paste(wd,"/A_Aragon_500m.tif", sep=""))
A_C_Tot<-rast(paste(wd,"/A_C_Tot.tif", sep=""))
A_Calcite<-rast(paste(wd, "/A_Calcite_500m.tif", sep=""))
A_Cs<-rast(paste(wd,"/A_Cs_500m.tif", sep=""))
A_Hg<-rast(paste(wd,"/A_Hg.tif", sep=""))
A_Kaolinit<-rast(paste(wd,"/A_Kaolinit.tif", sep=""))
A_Quartz<-rast(paste(wd,"/A_Quartz.tif", sep=""))
A_Tl<-rast(paste(wd,"/A_Tl.tif", sep=""))
A_Tot_14A<-rast(paste(wd,"/A_Tot_14A.tif", sep=""))
A_Tot_Flds<-rast(paste(wd,"/A_Tot_Flds.tif", sep=""))
C_Amorph<-rast(paste(wd,"/C_Amorph.tif", sep=""))
C_Analcime<-rast(paste(wd,"/C_Analcime.tif", sep=""))
C_Cr<-rast(paste(wd,"/C_Cr_500m.tif", sep=""))
C_Hematite<-rast(paste(wd,"/C_Hematite_500m.tif", sep=""))
C_Kaolinit<-rast(paste(wd,"/C_Kaolinit.tif", sep=""))
C_Mo<-rast(paste(wd,"/C_Mo.tif", sep=""))
C_Sb<-rast(paste(wd,"/C_Sb.tif", sep=""))
C_Se<-rast(paste(wd,"/C_Se.tif", sep=""))
C_Tot_14A<-rast(paste(wd,"/C_Tot_14A.tif", sep=""))
DepthToGW<-rast(paste(wd,"/DepthToGW_V2.tif", sep=""))
Fe<-rast(paste(wd,"/fe_v2.tif" , sep=""))
pH<-rast(paste(wd,"/pH_v2.tif" , sep=""))
prism30yr<-rast(paste(wd,"/prism30yr_500m.tif", sep=""))
Top5_As<-rast(paste(wd,"/Top5_As.tif", sep=""))
Top5_Ba<-rast(paste(wd,"/Top5_Ba.tif", sep=""))
Top5_Ca<-rast(paste(wd,"/Top5_Ca.tif", sep=""))
Top5_S<-rast(paste(wd,"/Top5_S_500m.tif", sep=""))
#Resample
A_Aragon<-resample(A_Aragon, Fe, method = "bilinear")
A_C_Tot<-resample(A_C_Tot, Fe, method = "bilinear")
A_Calcite<-resample(A_Calcite, Fe, method = "bilinear")
A_Cs<-resample(A_Cs, Fe, method = "bilinear")
A_Hg<-resample(A_Hg, Fe, method = "bilinear")
A_Kaolinit<-resample(A_Kaolinit, Fe, method = "bilinear")
A_Quartz<-resample(A_Quartz, Fe, method = "bilinear")
A_Tl<-resample(A_Tl, Fe, method = "bilinear")
A_Tot_14A<-resample(A_Tot_14A, Fe, method = "bilinear")
A_Tot_Flds<-resample(A_Tot_Flds, Fe, method = "bilinear")
C_Amorph<-resample(C_Amorph, Fe, method = "bilinear")
C_Analcime<-resample(C_Analcime, Fe, method = "bilinear")
C_Cr<-resample(C_Cr, Fe, method = "bilinear")
C_Hematite<-resample(C_Hematite, Fe, method = "bilinear")
C_Kaolinit<-resample(C_Kaolinit, Fe, method = "bilinear")
C_Mo<-resample(C_Mo, Fe, method = "bilinear")
C_Sb<-resample(C_Sb, Fe, method = "bilinear")
C_Se<-resample(C_Se, Fe, method = "bilinear")
C_Tot_14A<-resample(C_Tot_14A, Fe, method = "bilinear")
DepthToGW<-resample(DepthToGW, Fe, method = "bilinear")
pH<-resample(pH, Fe, method = "bilinear")
prism30yr<-resample(prism30yr, Fe, method = "bilinear")
Top5_As<-resample(Top5_As, Fe, method = "bilinear")
Top5_Ba<-resample(Top5_Ba, Fe, method = "bilinear")
Top5_Ca<-resample(Top5_Ca, Fe, method = "bilinear")
Top5_S<-resample(Top5_S, Fe, method = "bilinear")
#crop
A_Aragon<-crop(A_Aragon, Fe, mask = TRUE)
A_C_Tot<-crop(A_C_Tot, Fe, mask = TRUE)
A_Calcite<-crop(A_Calcite, Fe, mask = TRUE)
A_Cs<-crop(A_Cs, Fe, mask = TRUE)
A_Hg<-crop(A_Hg, Fe, mask = TRUE)
A_Kaolinit<-crop(A_Kaolinit, Fe, mask = TRUE)
A_Quartz<-crop(A_Quartz, Fe, mask = TRUE)
A_Tl<-crop(A_Tl, Fe, mask = TRUE)
A_Tot_14A<-crop(A_Tot_14A, Fe, mask = TRUE)
A_Tot_Flds<-crop(A_Tot_Flds, Fe, mask = TRUE)
C_Amorph<-crop(C_Amorph, Fe, mask = TRUE)
C_Analcime<-crop(C_Analcime, Fe, mask = TRUE)
C_Cr<-crop(C_Cr, Fe, mask = TRUE)
C_Hematite<-crop(C_Hematite, Fe, mask = TRUE)
C_Kaolinit<-crop(C_Kaolinit, Fe, mask = TRUE)
C_Mo<-crop(C_Mo, Fe, mask = TRUE)
C_Sb<-crop(C_Sb, Fe, mask = TRUE)
C_Se<-crop(C_Se, Fe, mask = TRUE)
C_Tot_14A<-crop(C_Tot_14A, Fe, mask = TRUE)
DepthToGW<-crop(DepthToGW, Fe, mask = TRUE)
pH<-crop(pH, Fe, mask = TRUE)
prism30yr<-crop(prism30yr, Fe, mask = TRUE)
Top5_As<-crop(Top5_As, Fe, mask = TRUE)
Top5_Ba<-crop(Top5_Ba, Fe, mask = TRUE)
Top5_Ca<-crop(Top5_Ca, Fe, mask = TRUE)
Top5_S<-crop(Top5_S, Fe, mask = TRUE)
#Write cropped rasters to file
writeRaster(A_Aragon, paste(d, "A_Aragon.tif", sep=""))
#Write cropped rasters to file
d<-"/Users/hoover/desktop/spatialPredFormattedTifs/"
writeRaster(A_Aragon, paste(d, "A_Aragon.tif", sep=""))
writeRaster(A_C_Tot, paste(d, "A_C_Tot.tif", sep=""))
writeRaster(A_Calcite, paste(d, "A_Calcite.tif", sep=""))
writeRaster(A_Cs, paste(d, "A_Cs.tif", sep=""))
writeRaster(A_Hg, paste(d, "A_Hg.tif", sep=""))
writeRaster(A_Kaolinit, paste(d, "A_Kaolinit.tif", sep=""))
writeRaster(A_Quartz, paste(d, "A_Quartz.tif", sep=""))
writeRaster(A_Tl, paste(d, "A_Tl.tif", sep=""))
writeRaster(A_Tot_14A, paste(d, "A_Tot_14A.tif", sep=""))
writeRaster(A_Tot_Flds, paste(d, "A_Tot_Flds.tif", sep=""))
writeRaster(C_Amorph, paste(d, "C_Amorph.tif", sep=""))
writeRaster(C_Analcime, paste(d, "C_Analcime.tif", sep=""))
writeRaster(C_Cr, paste(d, "C_Cr.tif", sep=""))
writeRaster(C_Hematite, paste(d, "C_Hematite.tif", sep=""))
#writeRaster(C_Kaolinit, paste(d, "C_Kaolinit.tif", sep=""))
writeRaster(C_Mo, paste(d, "C_Mo.tif", sep=""))
writeRaster(C_Sb, paste(d, "C_Sb.tif", sep=""))
writeRaster(C_Se, paste(d, "C_Se.tif", sep=""))
#writeRaster(C_Tot_14A, paste(d, "C_Tot_14A.tif", sep=""))
writeRaster(DepthToGW, paste(d, "DepthToGW.tif", sep=""))
writeRaster(pH, paste(d, "pH.tif", sep=""))
writeRaster(prism30yr, paste(d, "prism30yr.tif", sep=""))
writeRaster(Top5_As, paste(d, "Top5_As.tif", sep=""))
writeRaster(Top5_Ba, paste(d, "Top5_Ba.tif", sep=""))
writeRaster(Top5_Ca, paste(d, "Top5_Ca.tif", sep=""))
writeRaster(Top5_S, paste(d, "Top5_S.tif", sep=""))
#Reference raster
writeRaster(Fe, paste(d, "Fe.tif", sep=""))
#Load raster files for prediction model
wd <- ("/Users/hoover/desktop/")
rasterlist2 <-  list.files(paste0(wd,"spatialPredFormattedTifs"), full.names=TRUE, pattern=".tif$")
rasterlist2
d<-"/Users/hoover/desktop/spatialPredFormattedTifs/"
#Load each raster to check extent and crop as needed
A_Aragon<-raster(paste(d, "A_Aragon.tif", sep="")
#Load each raster to check extent and crop as needed
A_Aragon<-raster(paste(d, "A_Aragon.tif", sep=""))
library(caTools)
library(caret)
library(gbm)
library(xgboost) # for xgboost
library("SHAPforxgboost")
library(data.table)
library(cutpointr)
library(tidyverse)
#for spatial data
library(raster)
library(sp)
rm(list=ls())
# set data and seed values
date<-Sys.Date()
set.seed(1234)  # Setting seed
setwd("/Users/hoover/Documents/GitHub/coPlateauWaterQuality/03_data/")
#setwd("/Users/aaronnuanez/Documents/GitHub/coPlateauWaterQuality/03_data/")
#Load data
#Asdata = read.csv(in_path, na.strings = "NULL")
Asdata = read.csv("All_As_Data.csv", na.strings = "NULL")
# Filter data into train and test sets based on logical variable
train <- Asdata[Asdata$trainClassLTE10_splt == TRUE, ]
test <- Asdata[Asdata$trainClassLTE10_splt == FALSE, ]
#Make SiteID the row name so we can drop that field
rownames(train)<-train$SiteID
rownames(test)<-test$SiteID
#Make a list of the fewest number of variables with the highest overall prediction accuracy
a<-list("pH", "prism30yr", "A_Cs", "A_Aragon", "C_Hematite", "Fe", "Top5_S", "C_Cr", "A_Calcite",
"DepthToGW", "C_Mo", "Top5_Ca", "A_Tot_14A", "C_Amorph", "C_Analcime")
#define predictor and response variables in training set, As= 10 ug/L, keep variables defined above
train_x = data.matrix(train[, c(3, 5, 29, 25, 99, 2, 17, 71, 27, 108, 80, 11, 58, 65, 66)])
train_y = train[,161]
#define predictor and response variables in testing set
test_x = data.matrix(test[, c(3, 5, 29, 25, 99, 2, 17, 71, 27, 108, 80, 11, 58, 65, 66)])
test_y = test[,161]
#define final training and testing sets
xgb_train = xgb.DMatrix(data = train_x, label = train_y)
xgb_test = xgb.DMatrix(data = test_x, label = test_y)
#define watchlist
watchlist = list(train=xgb_train, test=xgb_test)
#Set parameters from all the tuning, steps 2 and 3
params = list(alpha = 2,
lambda = 5,
gamma = 1,
max_delta_step = 1,
eta = 0.005,
max_depth = 6,
subsample = 0.50,
colsample_bytree = 0.75,
min_child_weight = 1,
booster = "gbtree")
#Fully tuned model
model = xgboost(data = xgb_train, params = params,
nrounds = 750, objective = "binary:logistic",
eval_metric = "error", verbose = 1,
print_every_n = 100)
#write.csv(dfAc, file="20241223_modelTuning_primaryHyperparameters_alpha2Lambda5.csv")
#Testing Data
xgbpred <- predict (model, xgb_test)
xgbpred2 <- ifelse (xgbpred > 0.5,1,0)
confusionMatrix (factor(xgbpred2), factor(test_y)) #keep this for reporting
#Adjust the "true" threshold using Youden value
#For a figure
y_predJoin<-data.frame(cbind(test_y, xgbpred))#change field to match outcome modeled, this applies to LT10
#rename fields for ease of use
colnames(y_predJoin)[1]<-"Obsclass"
colnames(y_predJoin)[2]<-"Predexceed"
#Use cutpoint to identify threshold for As 'detection' balancing sensitivity and specificity using Youden metric
cp <- cutpointr(y_predJoin, Predexceed, Obsclass,
method = maximize_metric, metric = youden, pot_class = 1)
summary(cp) #make note of the cutpoint value for comparision with lines 91-93 above
plot(cp)
#Extract ROC Curve data for plotting
a<-as.data.frame(cp$roc_curve)
a$sens<-a$tp/(a$tp+a$fn) #sensitivity
a$spec<-a$tn/(a$tn+a$fp) #specificity
a$j<-(a$tp/(a$tp+a$fn))+(a$tn/(a$tn+a$fp))-1 #j-index, also called Youden value
##Make a plot like USGS PFAS paper S8
df <- a %>%
select(x.sorted, j, sens, spec) %>%
gather(key = "variable", value = "value", -x.sorted)
library(tidyverse)
##Make a plot like USGS PFAS paper S8
df <- a %>%
select(x.sorted, j, sens, spec) %>%
gather(key = "variable", value = "value", -x.sorted)
x.sorted
a$x.sorted
select(x.sorted, j, sens, spec)
##Make a plot like USGS PFAS paper S8
df <- a %>%
select(x.sorted, j, sens, spec) %>%
gather(key = "variable", value = "value", -x.sorted)
##Make a plot like USGS PFAS paper S8
df <- a %>%
select(j, sens, spec) %>%
gather(key = "variable", value = "value", -x.sorted)
##Make a plot like USGS PFAS paper S8
df <- a %>%
select(j, sens, spec) %>%
gather(key = "variable", value = "value", -x.sorted)
library(caTools)
library(caret)
library(gbm)
library(xgboost) # for xgboost
library("SHAPforxgboost")
library(data.table)
library(cutpointr)
#library(tidyverse)
#for spatial data
library(raster)
library(sp)
rm(list=ls())
# set data and seed values
date<-Sys.Date()
set.seed(1234)  # Setting seed
setwd("/Users/hoover/Documents/GitHub/coPlateauWaterQuality/03_data/")
#setwd("/Users/aaronnuanez/Documents/GitHub/coPlateauWaterQuality/03_data/")
#Load data
#Asdata = read.csv(in_path, na.strings = "NULL")
Asdata = read.csv("All_As_Data.csv", na.strings = "NULL")
# Filter data into train and test sets based on logical variable
train <- Asdata[Asdata$trainClassLTE10_splt == TRUE, ]
test <- Asdata[Asdata$trainClassLTE10_splt == FALSE, ]
#Make SiteID the row name so we can drop that field
rownames(train)<-train$SiteID
rownames(test)<-test$SiteID
#Make a list of the fewest number of variables with the highest overall prediction accuracy
a<-list("pH", "prism30yr", "A_Cs", "A_Aragon", "C_Hematite", "Fe", "Top5_S", "C_Cr", "A_Calcite",
"DepthToGW", "C_Mo", "Top5_Ca", "A_Tot_14A", "C_Amorph", "C_Analcime")
#define predictor and response variables in training set, As= 10 ug/L, keep variables defined above
train_x = data.matrix(train[, c(3, 5, 29, 25, 99, 2, 17, 71, 27, 108, 80, 11, 58, 65, 66)])
train_y = train[,161]
#define predictor and response variables in testing set
test_x = data.matrix(test[, c(3, 5, 29, 25, 99, 2, 17, 71, 27, 108, 80, 11, 58, 65, 66)])
test_y = test[,161]
#define final training and testing sets
xgb_train = xgb.DMatrix(data = train_x, label = train_y)
xgb_test = xgb.DMatrix(data = test_x, label = test_y)
#define watchlist
watchlist = list(train=xgb_train, test=xgb_test)
#Set parameters from all the tuning, steps 2 and 3
params = list(alpha = 2,
lambda = 5,
gamma = 1,
max_delta_step = 1,
eta = 0.005,
max_depth = 6,
subsample = 0.50,
colsample_bytree = 0.75,
min_child_weight = 1,
booster = "gbtree")
#Fully tuned model
model = xgboost(data = xgb_train, params = params,
nrounds = 750, objective = "binary:logistic",
eval_metric = "error", verbose = 1,
print_every_n = 100)
#write.csv(dfAc, file="20241223_modelTuning_primaryHyperparameters_alpha2Lambda5.csv")
#Testing Data
xgbpred <- predict (model, xgb_test)
xgbpred2 <- ifelse (xgbpred > 0.5,1,0)
confusionMatrix (factor(xgbpred2), factor(test_y)) #keep this for reporting
#Adjust the "true" threshold using Youden value
#For a figure
y_predJoin<-data.frame(cbind(test_y, xgbpred))#change field to match outcome modeled, this applies to LT10
#rename fields for ease of use
colnames(y_predJoin)[1]<-"Obsclass"
colnames(y_predJoin)[2]<-"Predexceed"
#Use cutpoint to identify threshold for As 'detection' balancing sensitivity and specificity using Youden metric
cp <- cutpointr(y_predJoin, Predexceed, Obsclass,
method = maximize_metric, metric = youden, pot_class = 1)
summary(cp) #make note of the cutpoint value for comparision with lines 91-93 above
plot(cp)
#Extract ROC Curve data for plotting
a<-as.data.frame(cp$roc_curve)
a$sens<-a$tp/(a$tp+a$fn) #sensitivity
a$spec<-a$tn/(a$tn+a$fp) #specificity
a$j<-(a$tp/(a$tp+a$fn))+(a$tn/(a$tn+a$fp))-1 #j-index, also called Youden value
##Make a plot like USGS PFAS paper S8
df <- a %>%
select(x.sorted, j, sens, spec) %>%
gather(key = "variable", value = "value", -x.sorted)
search()
search(select)
search("select")
