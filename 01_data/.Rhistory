install.packages("sf")
library(caTools)
library(randomForest)
library(caret)
setwd("C:/Users/jhoover/Documents/GitHub/coPlateauWaterQuality/01_data")
d<-read.csv("Model_input_definitions 1.csv")
d<-read.csv("Model_input.csv")
d<-read.csv("Model_input.csv")
d<-read.csv("model_input.csv")
d<-read.csv("model_input.csv")
d<-na.omit(d)
# Splitting data in train and test data
split <- sample.split(d, SplitRatio = 0.7)
split
train <- subset(d, split == "TRUE")
test <- subset(d, split == "FALSE")
View(train)
d<-read.csv("AsModelInput.csv")
d<-na.omit(d)
d<-read.csv("AsModelInput.csv")
# Loading package
library(caTools)
library(randomForest)
library(caret)
setwd("C:/Users/jhoover/Documents/GitHub/coPlateauWaterQuality/01_data")
#Clean up space
rm(list=ls())
#Load data
d<-read.csv("AsModelInput.csv")
#Seperate d dataframe using outcomes of interest, start with As3Cat
d<-na.omit(d$As3Cat)
#Load data
d<-read.csv("AsModelInput.csv")
#Seperate d dataframe using outcomes of interest, start with As3Cat
d<-na.omit(d[,4])
#Load data
d<-read.csv("AsModelInput.csv")
#Seperate d dataframe using outcomes of interest, start with As3Cat
d_ascat3<-d[!is.na(d$As3Cat)]
#Seperate d dataframe using outcomes of interest, start with As3Cat
d_ascat3<-d[!is.na(d$As3Cat,)]
#Seperate d dataframe using outcomes of interest, start with As3Cat
d_ascat3<-d[!is.na(d$As3Cat),]
train <- subset(d_ascat3, spl3cat == "TRUE")
test <- subset(d_ascat3, spl3cat == "FALSE")
summary(train)
#Seperate d dataframe using outcomes of interest, start with As3Cat
d_ascat3<-d[!is.na(,c(9:93)),]
#Seperate d dataframe using outcomes of interest, start with As3Cat
d_ascat3<-d[!is.na(c(9:93)),]
#Ensure no NAs because RFC can't handle NAs
dat <- train %>%
drop_na(train)
library(tidyverse)
#Ensure no NAs because RFC can't handle NAs
dat <- train %>%
drop_na(train)
#Ensure no NAs because RFC can't handle NAs
train %>% drop_na()
#Ensure no NAs because RFC can't handle NAs
dTrain <- train %>%
drop_na()
#Ensure no NAs because RFC can't handle NAs
dTrain <- train %>%
drop_na(c(9:93))
dTest <- test %>%
drop_na(c(9:93))
# Fitting Random Forest to the train dataset
set.seed(120)  # Setting seed
classifier_RF = randomForest(x = dTrain[,-(1:8)],
y = as.factor(dTrain$As3Cat),
ntree = 100)
classifier_RF
# Predicting the Test set results
y_pred = predict(classifier_RF, newdata = test[-c(1:8)])
# Predicting the Test set results
y_pred = predict(classifier_RF, newdata = dTest[-c(1:8)])
# Confusion Matrix
confusion_mtx = table(dTest[, 9], y_pred)
confusion_mtx
# Confusion Matrix
confusion_mtx = table(dTest[, 8], y_pred)
confusion_mtx
# Predicting the Test set results
y_pred = predict(classifier_RF, newdata = dTest[-c(1:7)])
# Confusion Matrix
confusion_mtx = table(dTest[, 8], y_pred)
confusion_mtx
y_pred
?predict
# Plotting model
plot(classifier_RF)
# Importance plot
importance(classifier_RF)
# Variable importance plot
varImpPlot(classifier_RF)
# Predicting the Test set results
y_pred = predict(classifier_RF, newdata = dTest[-c(1:8)])
# Predicting the Test set results
y_pred = predict(classifier_RF, newdata = dTrain[-c(1:8)])
# Confusion Matrix
confusion_mtx = table(dTest[, 8], y_pred)
# Predicting the Test set results
y_pred = predict(classifier_RF, newdata = dTest[-c(1:8)])
summary(y_pred)
# Confusion Matrix
confusion_mtx = table(dTest[, 8], y_pred)
confusion_mtx
dTest[,8]
dTest[,9]
# Confusion Matrix
confusion_mtx = table(dTest[,4], y_pred)
confusion_mtx
summary(confusion_mtx)
caret::confusion_mtx
