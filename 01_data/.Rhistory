install.packages("sf")
library(tidyverse)
library(here)
library(xgboost)
wine <- read_csv(here("data", "wine.csv"))
library(here)
wine <- read_csv(here("data", "wine.csv"))
params = list(eta = 0.3)
rwCV <- xgb.cv(params = list(eta = 0.3),
data = dtrain,
nfold = 10,
nrounds = 500,
early_stopping_rounds = 10,
print_every_n = 5)
rwCV <- xgb.cv(params = list(eta = 0.3),
data = dTrain,
nfold = 10,
nrounds = 500,
early_stopping_rounds = 10,
print_every_n = 5)
#setwd("/Users/hoover/Documents/GitHub/coPlateauWaterQuality/01_data")
setwd("C:/Users/jhoover/Documents/GitHub/coPlateauWaterQuality/01_data")
#setwd("C:/Users/austinmartinez/Documents/GitHub/coPlateauWaterQuality/01_data")
#Clean up the workspace
rm(list=ls())
#Load data
All_Asdata = read.csv("AsModelInput.csv")
# set a random seed & shuffle data frame
set.seed(1234)
Asdata <- All_Asdata[sample(1:nrow(All_Asdata)), ]
#Asdata<-as.data.frame(Asdata)
# get the numb 70/30 training test split
#split into training (70%) and testing set (30%)
sample_set<-sample(nrow(Asdata), round(nrow(Asdata)*.7), replace = F)
As_train = Asdata[sample_set,]
As_test = Asdata[-sample_set,]
#Complete cases
As_trainComp <- As_train[complete.cases(As_train[,c(3,9:93)]),]  #col 3, testing on As >10 ug/L category
As_testComp<- As_test[complete.cases(As_test[,c(3,9:93)]),] #col 3testing on As >10 ug/L category
#As_trainComp <- As_trainComp[,c(3,9:93)] #col 3, testing on As >10 ug/L category
#As_testComp<- As_testComp[,c(3,9:93)] #col 3testing on As >10 ug/L category
#define predictor and response variables in training set
train_x<-data.matrix(As_trainComp[, -c(1:1)])
train_y<-As_trainComp[,1]
#define predictor and response variables in testing set
test_x<-data.matrix(As_testComp[, -c(1:1)])
test_y<-As_testComp[,1]
dTrain <- xgb.DMatrix(data = train_x, label= train_y)
library(caTools)
library(caret)
library(gbm)
library(xgboost) # for xgboost
library(tidyverse) # general utility functions
#Clean up the workspace
rm(list=ls())
#Load data
All_Asdata = read.csv("AsModelInput.csv")
# set a random seed & shuffle data frame
set.seed(1234)
Asdata <- All_Asdata[sample(1:nrow(All_Asdata)), ]
#Asdata<-as.data.frame(Asdata)
# get the numb 70/30 training test split
#split into training (70%) and testing set (30%)
sample_set<-sample(nrow(Asdata), round(nrow(Asdata)*.7), replace = F)
As_train = Asdata[sample_set,]
As_test = Asdata[-sample_set,]
#Complete cases
As_trainComp <- As_train[complete.cases(As_train[,c(3,9:93)]),]  #col 3, testing on As >10 ug/L category
As_testComp<- As_test[complete.cases(As_test[,c(3,9:93)]),] #col 3testing on As >10 ug/L category
#As_trainComp <- As_trainComp[,c(3,9:93)] #col 3, testing on As >10 ug/L category
#As_testComp<- As_testComp[,c(3,9:93)] #col 3testing on As >10 ug/L category
#define predictor and response variables in training set
train_x<-data.matrix(As_trainComp[, -c(1:1)])
train_y<-As_trainComp[,1]
#define predictor and response variables in testing set
test_x<-data.matrix(As_testComp[, -c(1:1)])
test_y<-As_testComp[,1]
dTrain <- xgb.DMatrix(data = train_x, label= train_y)
dTest <- xgb.DMatrix(data = test_x, label= test_y)
#Clean up the workspace
rm(list=ls())
#Load data
All_Asdata = read.csv("AsModelInput.csv")
# set a random seed & shuffle data frame
set.seed(1234)
Asdata <- All_Asdata[sample(1:nrow(All_Asdata)), ]
#Asdata<-as.data.frame(Asdata)
# get the numb 70/30 training test split
#split into training (70%) and testing set (30%)
sample_set<-sample(nrow(Asdata), round(nrow(Asdata)*.7), replace = F)
As_train = Asdata[sample_set,]
As_test = Asdata[-sample_set,]
#Complete cases
As_trainComp <- As_train[complete.cases(As_train[,c(3,9:93)]),]  #col 3, testing on As >10 ug/L category
As_testComp<- As_test[complete.cases(As_test[,c(3,9:93)]),] #col 3testing on As >10 ug/L category
#define predictor and response variables in training set
train_x<-data.matrix(As_trainComp[, -c(1:1)])
train_y<-As_trainComp[,1]
View(train_x)
#define predictor and response variables in training set
train_x<-data.matrix(As_trainComp[, -c(1:8)])
train_y<-As_trainComp[,3]
#define predictor and response variables in testing set
test_x<-data.matrix(As_testComp[, -c(1:8)])
test_y<-As_testComp[,3]
dTrain <- xgb.DMatrix(data = train_x, label= train_y)
dTest <- xgb.DMatrix(data = test_x, label= test_y)
#Run cross validation
rwCV <- xgb.cv(params = list(eta = 0.3),
data = dTrain,
nfold = 10,
nrounds = 500,
early_stopping_rounds = 10,
print_every_n = 5)
head(rwCV$folds)
rwCV$evaluation_log[rwCV$best_iteration]
rwCV$evaluation_log %>% arrange(test_rmse_mean)
#Create a list of parameters
paramDF <- tibble(eta = c(0.001, 0.01, 0.05, 0.1, 0.2, 0.3, 0.4))
View(paramDF)
paramList <- lapply(split(paramDF, 1:nrow(paramDF)), as.list)
View(paramList)
#Loop through the parameter list and use a text progress bar
bestResults <- tibble()
set.seed(708)
pb <- txtProgressBar(style = 3)
for(i in seq(length(paramList))) {
rwCV <- xgb.cv(params = paramList[[i]],
data = dTrain,
nrounds = 500,
nfold = 10,
early_stopping_rounds = 10,
verbose = FALSE)
bestResults <- bestResults %>%
bind_rows(rwCV$evaluation_log[rwCV$best_iteration])
gc() # Free unused memory after each loop iteration
setTxtProgressBar(pb, i/length(paramList))
}
