setwd(old.dir)
unlink(x = "testdir/", recursive = TRUE)
swirl()
1:20
pi:10
15:1
?`:`
seq(1,20)
seq(0, 10, by=0.5)
my_seq <- seq(5, 10, length=30)
length(my_seq)
1:length(my_seq)
seq(along.with = my_seq)
seq_along(my_seq)
rep(0, times = 0)
rep(0, times = 40)
rep(0, 1, 2), times = 10
rep(c(0, 1, 2), times = 10)
rep(c(0, 1, 2), each = 10)
?c()
?c
swirl()
num_vect(05, 55, -10, 6)
"num_vect"(0.5, 55, -10, 6)
numeric_vector
numeric_vector(0.5, 55, -10, 6)
numeric(0.5, 55, -10, 6)
c(0.5, 55, -10, 6)
num_vect <- c(0.5, 55, -10, 6)
tf <- num_vect < 1
tf
num_vect >= 6
my_char <- "My", "name, "is""
my_char <- "My" "name "is""
my_char <- "My" "name" "is"
my_char <- c("My, "name", "is)
my_char <- c("My", "name", "is")
my_char
paste(my_char, collapse = " ")
my_name <- c(my_char, "Aaron")
my_char
my_name
paste(my_name, collapse = " ")
paste("Hello", "world!", cep = " ")
paste("Hello", "world!", sep = " ")
paste(c(1:3), c("X", "Y", "Z") sep = " " )
paste(c1:3("X", "Y", "Z") sep = " " )
paste(c 1:3("X", "Y", "Z") sep = " " )
paste(c(1:3), c("X", "Y", "Z") sep = " ")
paste("c(1:3)"", "c("X", "Y", "Z")" sep = " ")
paste("c(1:3), "c("X", "Y", "Z")" sep = " ")
paste(1:3 c("X", "Y", "Z"))
paste(1:3, c("X", "Y", "Z"), sep = "")
paste(LETTERS, 1:4, sep = "-")
x <- c(44, NA, 5, NA)
x * 3
y <- rnorm(1000)
z <- rep(NA, 1000)
my_data <- sample(c(y,z), 100)
my_na <- is.na(NA)
my_na <- is.na(my_data)
my_na
my_data == NA
sum(my_na(TRUE))
sum("my_na"(TRUE))
my_na(sum(TRUE))
my_na
sum(my_na)
my_data
0/0
Inf- Inf
x
x[1:10]
x[is.na(x)]
y <- [!is.na(x)]
y <- x[!is.na(x)]
y
y[y > 0]
x[x > 0]
x[!is.na(x) & x > 0]
x[c(1, 3, 4, 7)]
[c(3, 5, 7 )]
[c(3, 5, 7)]
x[c(3, 5, 7)]
x[0]
x[3000]
x[c(-2, -1)]
x[c(-2, -10)]
x[-c(2, 10)]
vect <- c(foo = 11, bar = 2, norf = NA)
vect
names(vect)
vect2 <- c(11, 2, NA)
names(vect2) <- c("food", "bar","norf")
names(vect2) <- c("foo", "bar","norf")
identical(vect, vect2 )
vect["bar"]
vect[c("foo", "bar")]
c <- a + b
a <- 4
b <- 1
c <- a + b
c <- a + b
c
a == b
??data.frame
View(ll)
swirl()
library(swirl)
swirl()
Sys.Date()
mean(c(2,4, 5))
submit()
boring_function('My first fuction!')
boring_function('My first function!')
boring_function
submit()
submit()
submit()
my_mean(c(4, 5, 10))
submit()
submit()
remainder(5)
remainder(11, 5)
remainder(divisor = 11, num = 5)
remainder(4, div = 2)
args(remainder)
submit()
submit()
submit()
submit()
submit()
evaluate(stdev, c(1.4, 3.6, 7.9, 8.8))
evaluate(standarddeviatio , c(1.4, 3.6, 7.9, 8.8))
evaluate(standarddeviation , c(1.4, 3.6, 7.9, 8.8))
evaluate(std, c(1.4, 3.6, 7.9, 8.8))
evaluate(sd, c(1.4, 3.6, 7.9, 8.8))
evaluate(function(x){x+1}, 6)
evaluate(function(x){x+1}, c(8, 4, 0))
evaluate(function(x), c(8, 4, 0))
evaluate(function(x){x[1]}, c(8, 4, 0))
evaluate(function(x){x[3]}, c(8, 4, 0))
evaluate(function(x){x[length(3)]}, c(8, 4, 0))
evaluate(function(x){x[length(x)]}, c(8, 4, 0))
?paste
paste("Programming", "is", "fun!")
submit()
paste(good day)
paste("good day")
paste("Good", "day")
telegram("Good", "day")
submit()
submit()
submit()
mad_libs(glendale, tall, doors)
mad_libs("glendale", "tall", "doors")
submit()
submit()
submit()
%p%("I", "love", "R")
"I" %p% "love" %p% "R!"
head(flags)
dim(flags)
viewinfo()
class(flags)
cls_lists <- lapply(flags,class)
cls_list <- lapply(flags,class)
cls_list
class(cls_list)
as.character(cls_list)
?sapply
cls_vect <- sapply(flags,class)
class(cls_vect)
sum(flags$orange)
?'$'
flag_colors <- flags[, 11:17]
head(flag_colors)
lapply(flag_colors, sum)
sapply(flag_colors, sum)
sapply(flag_colors, mean)
flag_shapes <- flags[, 19:23]
lapply(flag_shapes, rang)
lapply(flag_shapes, range)
shape_mat <- sapply(flag_shapes, range)
shape_mat
class(shape_mat)
unique(c(3, 4, 5, 5, 5, 6, 6))
unique_vals <- lapply(flags, unique)
unique_vals
lapply(flags, unique)
lapply(flags, length)
info()
sapply(unique_vals, length)
sapply(flags, unique)
lapply(unique_vals, function (elem) elem[2])
#Load libraries
library(reshape2)
library(dplyr)
#Set working directory
setwd("/Volumes/HooverShare/Shared_Group_Data/20_projects/06_coPlateau_Rework/")
#Load csv files
a<-read.csv("./02_Data/Raw_Data/WQP/00_archive/AZ_Uranium.csv")
b<-read.csv("./02_Data/Raw_Data/WQP/00_archive/NM_Uranium.csv")
c<-read.csv("./02_Data/Raw_Data/WQP/00_archive/Ca.csv", na.strings = "NULL")
d<-read.csv("./02_Data/Raw_Data/WQP/00_archive/Iron.csv", na.strings = "NULL")
e<-read.csv("./02_Data/Raw_Data/WQP/00_archive/ph.csv", na.strings = "NULL")
f<-read.csv("./02_Data/Raw_Data/WQP/00_archive/alkalinity.csv", na.strings = "NULL")
#Process the files
filter(ResultSampleFractionText == "Total") %>%
gsub("NULL"", as.character(f$ResultMeasureMeasureUnitCode))
gsub("NULL"", as.character(f$ResultMeasureMeasureUnitCode)))
gsub("NULL"", as.character(f$ResultMeasureMeasureUnitCode))
#for alkalinity and pH: check activity media name is water, check result sample fraction text to be "total", check result measure measure unit code is "std units", if anything else drop it
gsub("NULL"", as.character(f$ResultMeasureMeasureUnitCode))
#Process the files
f2<- f %>%
mutate() %>%
#for alkalinity and pH: check activity media name is water, check result sample fraction text to be "total", check result measure measure unit code is "std units", if anything else drop it
f<-read.csv("./02_Data/Raw_Data/WQP/00_archive/alkalinity.csv", na.strings = "NULL")
#Process the files
f2<- f %>%
filter(ResultSampleFractionText == "Total") %>%
mutate()
f3 <- gsub("NULL"", as.character(f$ResultMeasureMeasureUnitCode))
f3 <- f2 gsub("NULL"", as.character(f$ResultMeasureMeasureUnitCode))
f3 <- gsub("NULL"", as.character(f$ResultMeasureMeasureUnitCode))
f3 <- gsub("NULL"", as.character(f2$ResultMeasureMeasureUnitCode))
#Process the files
f2 <- f %>%
filter(ResultSampleFractionText == "Total") %>%
mutate()
f3 <- gsub("NULL"", as.character(f2$ResultMeasureMeasureUnitCode))
#for alkalinity and pH: check activity media name is water, check result sample fraction text to be "total", check result measure measure unit code is "std units", if anything else drop it
f3 <- gsub("NULL"", as.character(f2$ResultMeasureMeasureUnitCode))
#Alkalinity
f2 <- f %>%
filter(ResultSampleFractionText == "Total") %>%
#Alkalinity
f2 <- f %>%
filter(ResultSampleFractionText == "Total") %>%
mutate()
f3 <- f2 %>% filter(ResultMeasureMeasureUnitCode != "NULL")
View(f3)
write.csv(f3, "alkalinitycheck.csv", row.names = FALSE)
write.csv(f3, file = "~/Desktop/alkalinitycheck.csv", row.names = FALSE)
f3 <- f2 %>% filter(ResultMeasureMeasureUnitCode != "NULL")
ug_to_mg <-0.001
f4 <- f3 %>%
mutate(ResultMeasureMeasureUnitCode = ifelse(Unit == "ug/L", ResultMeasureMeasureUnitCode * ug_to_mg, ResultMeasureMeasureUnitCode),
ResultMeasureValue = ifelse(ResultMeasureValue == "ug/L", "mg/L", ResultMeasureValue))
f4 <- f3 %>%
mutate(ResultMeasureMeasureUnitCode = ifelse(ResultMeasureValue == "ug/L", ResultMeasureMeasureUnitCode * ug_to_mg, ResultMeasureMeasureUnitCode),
ResultMeasureValue = ifelse(ResultMeasureValue == "ug/L", "mg/L", ResultMeasureValue))
write.csv(f4, file = "~/Desktop/alkalinitycheck.csv", row.names = FALSE)
write.csv(f4, file = "~/Desktop/alkalinitycheck.csv", row.names = FALSE)
mutate()
mutate
#Alkalinity
f2 <- f %>%
filter(ResultSampleFractionText == "Total") %>%
mutate()
f3 <- f2 %>% filter(ResultMeasureMeasureUnitCode != "NULL")
#f4 <- f3 %>%
#  mutate(ResultMeasureMeasureUnitCode = ifelse(ResultMeasureValue == "ug/L", ResultMeasureMeasureUnitCode * ug_to_mg, ResultMeasureMeasureUnitCode),
#         ResultMeasureValue = ifelse(ResultMeasureValue == "ug/L", "mg/L", ResultMeasureValue))
write.csv(f3, file = "~/Desktop/alkalinitycheck.csv", row.names = FALSE)
ug_to_mg <-0.001
f4 <- f3 %>%
mutate(ResultMeasureMeasureUnitCode = ifelse(ResultMeasureValue == "ug/L", ResultMeasureMeasureUnitCode * ug_to_mg, ResultMeasureMeasureUnitCode),
ResultMeasureValue = ifelse(ResultMeasureValue == "ug/L", "mg/L", ResultMeasureValue))
write.csv(f4, file = "~/Desktop/alkalinitycheck.csv", row.names = FALSE)
write.csv(f4, file = "~/Desktop/alkalinitycheck.csv", row.names = FALSE)
f3 <- f2 %>% filter(ResultMeasureMeasureUnitCode != "NULL")
ug_to_mg <-0.001
f4 <- f3 %>%
ResultMeasureValue = ifelse(ResultMeasureMeasureUnitCode == "ug/L", ResultMeasureValue * ug_to_mg, ResultMeasureValue),  # Convert values
f4 <- f3 %>%
ResultMeasureValue = ifelse(ResultMeasureMeasureUnitCode == "ug/L", ResultMeasureValue * ug_to_mg, ResultMeasureValue)  # Convert values
write.csv(f4, file = "~/Desktop/alkalinitycheck.csv", row.names = FALSE)
write.csv(e3, file = "~/Desktop/pHcheck.csv", row.names = FALSE)
#pH
e2 <- e %>%
filter(ResultSampleFractionText == "Total") %>%
mutate()
e3 <- e2 %>% filter(ResultMeasureMeasureUnitCode != "NULL")
write.csv(e3, file = "~/Desktop/pHcheck.csv", row.names = FALSE)
#Iron
d2 <- d %>%
filter(ResultSampleFractionText == "Total") %>%
mutate()
write.csv(d2, file = "~/Desktop/pHcheck.csv", row.names = FALSE)
#Calcium: filter to only dissolved in ResultSampleFractionText, keep mg/L (need to do)
c2 <- c %>%
filter(ResultSampleFractionText == "Total") %>%
mutate()
write.csv(c2, file = "~/Desktop/ironcheck.csv", row.names = FALSE)
write.csv(c2, file = "~/Desktop/calciumcheck.csv", row.names = FALSE)
#Calcium: filter to only dissolved in ResultSampleFractionText, keep mg/L (need to do)
c2 <- c %>%
filter(ResultSampleFractionText == "Total") %>%
mutate()
write.csv(c2, file = "~/Desktop/calciumcheck.csv", row.names = FALSE)
#Calcium: filter to only dissolved in ResultSampleFractionText, keep mg/L (need to do)
c2 <- c %>%
filter(ResultSampleFractionText == "Dissolved") %>%
mutate()
write.csv(c2, file = "~/Desktop/calciumcheck.csv", row.names = FALSE)
write.csv(c2, file = "~/Desktop/calciumcheck.csv", row.names = FALSE)
write.csv(a, file = "~/Desktop/AZ_Ucheck.csv", row.names = FALSE)
write.csv(b, file = "~/Desktop/NM_Ucheck.csv", row.names = FALSE)
#Uranium: AZ (keep "U" and "Uranium-238" in CharacteristicName), NM (keep "U" and "Uranium-238" in CharacteristicName)
a2 <- a filter(CharacteristicName == "Uranium-238" |
#Uranium: AZ (keep "U" and "Uranium-238" in CharacteristicName), NM (keep "U" and "Uranium-238" in CharacteristicName)
a2 <- a %>%
filter(CharacteristicName == "Uranium-238" |
CharacteristicName == "U") %>%
mutate()
b2 <- b %>%
filter(CharacteristicName == "Uranium-238" |
CharacteristicName == "U") %>%
mutate()
write.csv(a2, file = "~/Desktop/AZ_Ucheck.csv", row.names = FALSE)
write.csv(b2, file = "~/Desktop/NM_Ucheck.csv", row.names = FALSE)
#Uranium: AZ (keep "U" and "Uranium-238" in CharacteristicName), NM (keep "U" and "Uranium-238" in CharacteristicName)
a2 <- a %>%
filter(CharacteristicName == "Uranium-238" |
CharacteristicName == "U" |
ResultMeasureValue != "NULL") %>%
mutate()
write.csv(a2, file = "~/Desktop/AZ_Ucheck.csv", row.names = FALSE)
#Uranium: AZ (keep "U" and "Uranium-238" in CharacteristicName), NM (keep "U" and "Uranium-238" in CharacteristicName)
a2 <- a %>%
filter(CharacteristicName == "Uranium-238" |
CharacteristicName == "U" |
ResultMeasureValue != "NULL") %>%
mutate()
write.csv(a2, file = "~/Desktop/AZ_Ucheck.csv", row.names = FALSE)
b2 <- b %>%
filter(CharacteristicName == "Uranium-238" |
CharacteristicName == "U") %>%
mutate()
write.csv(b2, file = "~/Desktop/NM_Ucheck.csv", row.names = FALSE)
write.csv(a2, file = "~/Desktop/AZ_Ucheck.csv", row.names = FALSE)
#Uranium: AZ (keep "U" and "Uranium-238" in CharacteristicName), NM (keep "U" and "Uranium-238" in CharacteristicName)
a2 <- a %>%
filter(CharacteristicName == "Uranium-238" |
CharacteristicName == "U" |) %>%
#Uranium: AZ (keep "U" and "Uranium-238" in CharacteristicName), NM (keep "U" and "Uranium-238" in CharacteristicName)
a2 <- a %>%
filter(CharacteristicName == "Uranium-238" |
CharacteristicName == "U") %>%
mutate()
a3 <- a2 %>% filter(ResultMeasureValue != "NULL")
b2 <- b %>%
filter(CharacteristicName == "Uranium-238" |
CharacteristicName == "U") %>%
mutate()
b3 <- b2 %>% filter(ResultMeasureValue != "NULL")
write.csv(a2, file = "~/Desktop/AZ_Ucheck.csv", row.names = FALSE)
write.csv(b2, file = "~/Desktop/NM_Ucheck.csv", row.names = FALSE)
#Uranium: AZ (keep "U" and "Uranium-238" in CharacteristicName), NM (keep "U" and "Uranium-238" in CharacteristicName)
a2 <- a %>%
filter(CharacteristicName == "Uranium-238" |
CharacteristicName == "U") %>%
mutate()
a3 <- a2 %>% filter(ResultMeasureValue != "NULL")
b2 <- b %>%
filter(CharacteristicName == "Uranium-238" |
CharacteristicName == "U") %>%
mutate()
b3 <- b2 %>% filter(ResultMeasureValue != "NULL")
write.csv(a3, file = "~/Desktop/AZ_Ucheck.csv", row.names = FALSE)
write.csv(b3, file = "~/Desktop/NM_Ucheck.csv", row.names = FALSE)
setwd("/Volumes/HooverShare/Shared_Group_Data/20_projects/06_coPlateau_Rework/")
#Clean up the workspace
rm(list=ls())
WQP <- read.csv(a<-read.csv("./02_Data/Raw_Data/WQP_As_All.csv", na.strings = "NULL")
As_COPLat_Data<-rbind(WQP, NNWells)
WQP <- read.csv("./02_Data/Raw_Data/WQP_As_All.csv", na.strings = "NULL")
NNWells <- read.csv("./02_Data/Raw_Data/Clean_nnwells3_ExportTable.csv", na.strings = "NULL")
As_COPLat_Data<-rbind(WQP, NNWells)
library(reshape2)
library(gtools)
library(dplyr)
library(tidyr)
library(ggcorrplot)
setwd("/Volumes/HooverShare/Shared_Group_Data/20_projects/06_coPlateau_Rework/")
library(caTools)
library(randomForest)
library(caret)
library(tidyverse)
rm(list=ls())
# set data and seed values
date<-Sys.Date()
set.seed(1234)  # Setting seed
#Load data
Asdata <- read.csv("All_As_Data.csv")
# Filter data into train and test sets based on logical variable 'trainCat2'
train <- Asdata[Asdata$trainClassLTE5_splt == TRUE, ] #Need up update this field and dataframe to match what is produce in lines 21-24
setwd("/Users/hoover/Documents/GitHub/coPlateauWaterQuality/03_data/")
rm(list=ls())
# set data and seed values
date<-Sys.Date()
set.seed(1234)  # Setting seed
#Load data
Asdata <- read.csv("All_As_Data.csv")
# Filter data into train and test sets based on logical variable 'trainCat2'
train <- Asdata[Asdata$trainClassLTE5_splt == TRUE, ] #Need up update this field and dataframe to match what is produce in lines 21-24
test <- Asdata[Asdata$trainClassLTE5_splt == FALSE, ] #Need up update this field and dataframe to match what is produce in lines 21-24
#Make SiteID the row name so we can drop that field
rownames(train)<-train$SiteID
rownames(test)<-test$SiteID
#Drop unused fields
AsTrain<-train[,-c(1, 4, 109:112, 157:159, 161:168)] #Drop the As concentration, and the categorical variables we already transformed
AsTest<-test[,-c(1, 4, 109:112, 157:159, 161:168)]
AsTrain_x<-AsTrain[,-151]
AsTrain_y<-AsTrain[,151]
#Try variable tuning
library("VSURF")
install.packages("caTools")
install.packages("randomForest")
install.packages("caret")
library(caTools)
library(randomForest)
library(caret)
library(tidyverse)
rm(list=ls())
#Load data
Asdata <- read.csv("All_As_Data.csv")
# Filter data into train and test sets based on logical variable 'trainCat2'
train <- Asdata[Asdata$trainClassLTE5_splt == TRUE, ] #Need up update this field and dataframe to match what is produce in lines 21-24
test <- Asdata[Asdata$trainClassLTE5_splt == FALSE, ] #Need up update this field and dataframe to match what is produce in lines 21-24
#Make SiteID the row name so we can drop that field
rownames(train)<-train$SiteID
rownames(test)<-test$SiteID
#Drop unused fields
AsTrain<-train[,-c(1, 4, 109:112, 157:159, 161:168)] #Drop the As concentration, and the categorical variables we already transformed
AsTest<-test[,-c(1, 4, 109:112, 157:159, 161:168)]
#Ensure ClassLTE5 is a Factor (Categorical Variable)
AsTrain$ClassLTE5 <- as.factor(AsTrain$ClassLTE5)
AsTest$ClassLTE5  <- as.factor(AsTest$ClassLTE5)
#Load data
classifier_RF <- readRDS("2025-02-06_rf_5ugL.rds")
setwd("/Users/hoover/Documents/GitHub/coPlateauWaterQuality/03_data/")
#Load data
classifier_RF <- readRDS("./RF_rds/2025-02-06_rf_5ugL.rds")
classifier_RF
# Predicting the Test set results
y_pred <- predict(classifier_RF, newdata = AsTest)
# Confusion Matrix
confusion_mtx <- confusionMatrix(y_pred, AsTest$ClassLTE5)
confusion_mtx
rm(list=ls())
# set data and seed values
date<-Sys.Date()
set.seed(1234)  # Setting seed
#Load data
Asdata <- read.csv("All_As_Data.csv")
# Filter data into train and test sets based on logical variable 'trainCat2'
train <- Asdata[Asdata$trainClassLTE5_splt == TRUE, ] #Need up update this field and dataframe to match what is produce in lines 21-24
test <- Asdata[Asdata$trainClassLTE5_splt == FALSE, ] #Need up update this field and dataframe to match what is produce in lines 21-24
#Make SiteID the row name so we can drop that field
rownames(train)<-train$SiteID
rownames(test)<-test$SiteID
#Drop unused fields
AsTrain<-train[,-c(1, 4, 109:112, 157:159, 161:168)] #Drop the As concentration, and the categorical variables we already transformed
AsTest<-test[,-c(1, 4, 109:112, 157:159, 161:168)]
AsTrain_x<-AsTrain[,-151]
AsTrain_y<-AsTrain[,151]
AsTrain<-AsTrain[,c(25, 2, 3, 105, 1, 104, 9, 97, 36, 58, 151)] #Drop the As concentration, and the categorical variables we already transformed
AsTest<-AsTest[,c(25, 2, 3, 105, 1, 104, 9, 97, 36, 58, 151)]
#Ensure ClassLTE5 is a Factor (Categorical Variable)
AsTrain$ClassLTE5 <- as.factor(AsTrain$ClassLTE5)
AsTest$ClassLTE5  <- as.factor(AsTest$ClassLTE5)
# Fitting Random Forest to the train dataset
tunegrid <- expand.grid(mtry = (1:(length(AsTrain)-1))) #Change to 1:7 if testing for real, 1:3 was used for model development
# Fitting Random Forest to the train dataset
classifier_RF<-train(
data = AsTrain,
factor(ClassLTE5) ~ .,
metric = "Accuracy",
method = "rf",
trControl = trainControl(method="cv", number = 5),    #change number = 10 if doing for real
tuneGrid  = tunegrid,
ntree = 500,
verboseIter = TRUE  # Enable verbose output for troubleshooting
)
classifier_RF
#Run random forest model
#mtry is from step 1, might want to try different number of trees too
model<-randomForest(data=AsTrain, factor(ClassLTE5)~., mtry=3, ntree=500, importance = TRUE);
print(model)
# Extract variable importance
importance_df <- data.frame(
Variable = rownames(importance(model)),
Importance = importance(model)[, "MeanDecreaseGini"]  # Using Gini importance
)
View(importance_df)
# Select top 10 most important variables
top_vars <- importance_df %>%
arrange(desc(Importance)) %>%
slice_head(n = 15)  # Keep top 10 variables
# Create variable importance plot
xy<-ggplot(top_vars, aes(x = reorder(Variable, Importance), y = Importance)) +
geom_bar(stat = "identity", fill = "blue", alpha = 0.7) +
coord_flip() +  # Flip for better readability
labs(title = "Variable Importance, Random Forest at 5 ug/L Threshold",
x = "Variable",
y = "Importance (Mean Decrease in Gini)") +
theme_classic()
xy
View(importance_df)
