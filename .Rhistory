q()
install.packages("swirl")
library("swirl")
swirl()
5+7
x<-5+7
x
y <- x-3
yt
y
z <- c(1.1, 9, 3.14)
?c
z
z, 555, z
z,555,z
z 555 z
c(z, 555, z)
z * 2 + 100
my_sqrt <- sqrt(z-1)
my_sqrt
my_div <- z/my_sqrt
my_div
c(1, 2 , 3, 4) + c(0, 10)
c(1, 2, 3, 4) + c(0, 10, 100)
z * 2 + 1000
my_div
swirl()
getwd()
ls()
x <- 9
ls()
list.files()
dir()
?list.files
list.files()
args(list.files)
old.dir <- args(list.files)
old.dir <- getwd()
dircreate(testdir)
dir.create(testdir)
testdir <- dir.create()
test.dir <- dir.create(getwd)
info()
setwd(testdir)
dir.create("testdir")
setwd(testdir)
setwd("testdir")
file.create(mytest.R)
filecreate("mycreate.R0")
filecreate("mycreate.R")
file.create("mycreate.R0")
file.create("mycreate.R")
file.create("mytest.R")
ls
list.files()
file.exists("mytest.R")
file.info("mytest.R")
file.rename("mytest.R", "mytest2.R")
file.copy("mytest2.R", "mytest3.R")
file.path("mytest3.R")
file.path(folder1, folder2)
file.path("folder1", "folder2")
?dir.create
dir.create("testdir2") file.path("testdir3")
dir.create(testdir2) file.path("testdir3")
dir.create(testdir2), file.path("testdir3")
dir.create(testdir2)
dir.create("testdir2")
dir.create(file.path('testdir2, 'testdir3), recursive = TRUE)
dir.create(file.path('testdir2', 'testdir3'), recursive = TRUE)
setwd()
setwd(old.dir)
unlink(x = "testdir/", recursive = TRUE)
swirl()
1:20
pi:10
15:1
?`:`
seq(1,20)
seq(0, 10, by=0.5)
my_seq <- seq(5, 10, length=30)
length(my_seq)
1:length(my_seq)
seq(along.with = my_seq)
seq_along(my_seq)
rep(0, times = 0)
rep(0, times = 40)
rep(0, 1, 2), times = 10
rep(c(0, 1, 2), times = 10)
rep(c(0, 1, 2), each = 10)
?c()
?c
swirl()
num_vect(05, 55, -10, 6)
"num_vect"(0.5, 55, -10, 6)
numeric_vector
numeric_vector(0.5, 55, -10, 6)
numeric(0.5, 55, -10, 6)
c(0.5, 55, -10, 6)
num_vect <- c(0.5, 55, -10, 6)
tf <- num_vect < 1
tf
num_vect >= 6
my_char <- "My", "name, "is""
my_char <- "My" "name "is""
my_char <- "My" "name" "is"
my_char <- c("My, "name", "is)
my_char <- c("My", "name", "is")
my_char
paste(my_char, collapse = " ")
my_name <- c(my_char, "Aaron")
my_char
my_name
paste(my_name, collapse = " ")
paste("Hello", "world!", cep = " ")
paste("Hello", "world!", sep = " ")
paste(c(1:3), c("X", "Y", "Z") sep = " " )
paste(c1:3("X", "Y", "Z") sep = " " )
paste(c 1:3("X", "Y", "Z") sep = " " )
paste(c(1:3), c("X", "Y", "Z") sep = " ")
paste("c(1:3)"", "c("X", "Y", "Z")" sep = " ")
paste("c(1:3), "c("X", "Y", "Z")" sep = " ")
paste(1:3 c("X", "Y", "Z"))
paste(1:3, c("X", "Y", "Z"), sep = "")
paste(LETTERS, 1:4, sep = "-")
x <- c(44, NA, 5, NA)
x * 3
y <- rnorm(1000)
z <- rep(NA, 1000)
my_data <- sample(c(y,z), 100)
my_na <- is.na(NA)
my_na <- is.na(my_data)
my_na
my_data == NA
sum(my_na(TRUE))
sum("my_na"(TRUE))
my_na(sum(TRUE))
my_na
sum(my_na)
my_data
0/0
Inf- Inf
x
x[1:10]
x[is.na(x)]
y <- [!is.na(x)]
y <- x[!is.na(x)]
y
y[y > 0]
x[x > 0]
x[!is.na(x) & x > 0]
x[c(1, 3, 4, 7)]
[c(3, 5, 7 )]
[c(3, 5, 7)]
x[c(3, 5, 7)]
x[0]
x[3000]
x[c(-2, -1)]
x[c(-2, -10)]
x[-c(2, 10)]
vect <- c(foo = 11, bar = 2, norf = NA)
vect
names(vect)
vect2 <- c(11, 2, NA)
names(vect2) <- c("food", "bar","norf")
names(vect2) <- c("foo", "bar","norf")
identical(vect, vect2 )
vect["bar"]
vect[c("foo", "bar")]
c <- a + b
a <- 4
b <- 1
c <- a + b
c <- a + b
c
a == b
??data.frame
View(ll)
swirl()
library(swirl)
swirl()
Sys.Date()
mean(c(2,4, 5))
submit()
boring_function('My first fuction!')
boring_function('My first function!')
boring_function
submit()
submit()
submit()
my_mean(c(4, 5, 10))
submit()
submit()
remainder(5)
remainder(11, 5)
remainder(divisor = 11, num = 5)
remainder(4, div = 2)
args(remainder)
submit()
submit()
submit()
submit()
submit()
evaluate(stdev, c(1.4, 3.6, 7.9, 8.8))
evaluate(standarddeviatio , c(1.4, 3.6, 7.9, 8.8))
evaluate(standarddeviation , c(1.4, 3.6, 7.9, 8.8))
evaluate(std, c(1.4, 3.6, 7.9, 8.8))
evaluate(sd, c(1.4, 3.6, 7.9, 8.8))
evaluate(function(x){x+1}, 6)
evaluate(function(x){x+1}, c(8, 4, 0))
evaluate(function(x), c(8, 4, 0))
evaluate(function(x){x[1]}, c(8, 4, 0))
evaluate(function(x){x[3]}, c(8, 4, 0))
evaluate(function(x){x[length(3)]}, c(8, 4, 0))
evaluate(function(x){x[length(x)]}, c(8, 4, 0))
?paste
paste("Programming", "is", "fun!")
submit()
paste(good day)
paste("good day")
paste("Good", "day")
telegram("Good", "day")
submit()
submit()
submit()
mad_libs(glendale, tall, doors)
mad_libs("glendale", "tall", "doors")
submit()
submit()
submit()
%p%("I", "love", "R")
"I" %p% "love" %p% "R!"
head(flags)
dim(flags)
viewinfo()
class(flags)
cls_lists <- lapply(flags,class)
cls_list <- lapply(flags,class)
cls_list
class(cls_list)
as.character(cls_list)
?sapply
cls_vect <- sapply(flags,class)
class(cls_vect)
sum(flags$orange)
?'$'
flag_colors <- flags[, 11:17]
head(flag_colors)
lapply(flag_colors, sum)
sapply(flag_colors, sum)
sapply(flag_colors, mean)
flag_shapes <- flags[, 19:23]
lapply(flag_shapes, rang)
lapply(flag_shapes, range)
shape_mat <- sapply(flag_shapes, range)
shape_mat
class(shape_mat)
unique(c(3, 4, 5, 5, 5, 6, 6))
unique_vals <- lapply(flags, unique)
unique_vals
lapply(flags, unique)
lapply(flags, length)
info()
sapply(unique_vals, length)
sapply(flags, unique)
lapply(unique_vals, function (elem) elem[2])
#setwd("~/Desktop")
setwd("/Users/aaronnuanez/Documents/GitHub/coPlateauWaterQuality")
#Load libraries
library(tidyverse)
library(dplyr)
#Clean up the workspace
rm(list=ls())
#Load data
data <- read.csv("./02_uranium/01_data/Nure7_Data_ExportTable.csv")
data2 <- read.csv("./02_uranium/01_data/wqpData_cleaned_20240808.csv", na.strings = "NULL")
data3 <- read.csv("./02_uranium/01_data/nnwells3_ExportTable.csv")
#Rename fields in NURE dataset
data<- data %>%
rename(baseflow = bfi48grd_ProjectRaster2, prism30yr = PRISM_ppt_30yr_ProjectRaster1, U = u_fl_ppb)
#Rename fields in NN Wells Data
data2<- data2 %>%
rename(baseflow = bfi48grd,
prism30yr = PRISM_30yrNorm,
welldpth = WellDepthMeasureValue,
As = ResultMeasureValue,
F30mElevationFoCo = F30mElevat)
setdiff(a, b) #this will tell you the fields that don't match between a and b, anything not matching needs to be added to b
setdiff(b, a) #this will tell you the fields that don't match between b and a, anything not matching needs to be added to a
#Need to find missing fields then create new blank fields, i started by comparing data and data1, need to repeat for data2
a<-colnames(data)
b<-colnames(data2)
c<-colnames(data3)
setdiff(a, b) #this will tell you the fields that don't match between a and b, anything not matching needs to be added to b
setdiff(b, a) #this will tell you the fields that don't match between b and a, anything not matching needs to be added to a
setdiff(a, c)
setdiff(b, c)
setdiff(a, c)
#setwd("~/Desktop")
setwd("/Users/aaronnuanez/Documents/GitHub/coPlateauWaterQuality")
#Load libraries
library(tidyverse)
library(dplyr)
#Clean up the workspace
rm(list=ls())
#Load data
Nure <- read.csv("./02_uranium/01_data/Nure7_Data_ExportTable.csv")
WQP <- read.csv("./02_uranium/01_data/wqpData_cleaned_20240808.csv", na.strings = "NULL")
NNwells <- read.csv("./02_uranium/01_data/nnwells3_ExportTable.csv")
#Rename fields in NURE dataset
Nure <- Nure %>%
rename(baseflow = bfi48grd_ProjectRaster2, prism30yr = PRISM_ppt_30yr_ProjectRaster1, U = u_fl_ppb)
#Rename fields in WQP Data
WQP<- WQP %>%
rename(baseflow = bfi48grd,
prism30yr = PRISM_30yrNorm,
welldpth = WellDepthMeasureValue,
As = ResultMeasureValue,
F30mElevationFoCo = F30mElevat)
#Rename fields in NNwells data
NNwells<- NNwells %>%
rename(welldpth = depth,
As = As_,
Fl = Fl_combine)
#table(data3$Fl)
##Concatenate data source name to SiteID/WellID/Record Number
Nure$SiteID<-paste("nure-",Nure$rec_no, sep="")
WQP$SiteID<-paste("nnWells-",WQP$SiteID, sep="")
NNwells$SiteID<-paste("wtrQalPort-",NNwells$well_id, sep="")
str(data3$SiteID)
str(NNwells$SiteID)
#Need to find missing fields then create new blank fields, i started by comparing data and data1, need to repeat for data2
a<-colnames(Nure)
b<-colnames(WQP)
c<-colnames(NNwells)
setdiff(a, b) #this will tell you the fields that don't match between a and b, anything not matching needs to be added to b
setdiff(b, a) #this will tell you the fields that don't match between b and a, anything not matching needs to be added to a
setdiff(a, c)
setdiff(c, b)
#setwd("~/Desktop")
setwd("/Users/aaronnuanez/Documents/GitHub/coPlateauWaterQuality")
#Load libraries
library(tidyverse)
library(dplyr)
#Clean up the workspace
rm(list=ls())
#Load data
Nure <- read.csv("./02_uranium/01_data/Nure7_Data_ExportTable.csv")
WQP <- read.csv("./02_uranium/01_data/wqpData_cleaned_20240808.csv", na.strings = "NULL")
NNwells <- read.csv("./02_uranium/01_data/nnwells3_Check_ExportTable.csv")
#Rename fields in NURE dataset
Nure <- Nure %>%
rename(baseflow = bfi48grd_ProjectRaster2, prism30yr = PRISM_ppt_30yr_ProjectRaster1, U = u_fl_ppb)
#Rename fields in WQP Data
WQP<- WQP %>%
rename(baseflow = bfi48grd,
prism30yr = PRISM_30yrNorm,
welldpth = WellDepthMeasureValue,
As = ResultMeasureValue,
F30mElevationFoCo = F30mElevat)
#str(NNwells$SiteID)
#combine data sets
combined_data <- bind_rows(Nure, WQP)
combined_data1 <- bind_rows(combined_data, NNwells)#
#Need to find missing fields then create new blank fields, i started by comparing data and data1, need to repeat for data2
a<-colnames(Nure)
b<-colnames(WQP)
c<-colnames(NNwells)
setdiff(c, a)
setdiff(c, b)
setdiff(a, b) #this will tell you the fields that don't match between a and b, anything not matching needs to be added to b, shows what data is in a that is not in b
setdiff(b, a) #this will tell you the fields that don't match between b and a, anything not matching needs to be added to a
setdiff(a, c)
setdiff(b, c)
setdiff(c, b)
setdiff(c, a)
