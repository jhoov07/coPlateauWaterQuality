#Drop unused fields
AsTest<-AsTest[,-c(1:6,213:214,216:217)]
View(AsTest)
View(Asdata)
#Drop unused fields
AsTest<-AsTest[,-c(1:5,213:214,216:217)]
View(AsTest)
View(Asdata)
#Load data
Asdata = read.csv("./01_data/CoPlateau_As/Cleaned_As_GIS_Filtered.csv",
na.strings = "NULL") #Probably need to simplify the path so the script and data are in the same folder for the HPC
#Subset to test set
AsTest<-subset(Asdata, spl3cat==FALSE)
#Drop unused fields
AsTest<-AsTest[,-c(1:5,212:214,216:217)]
#Predictions
y_pred = predict(Arsenic_xgb, newdata = AsTest[,-c(1:6,212:214,216:217)], type="prob")
#Predictions
y_pred = predict(Arsenic_xgb, newdata = AsTest[,-c(1:5,212:214,216:217)], type="prob")
#Predictions
y_pred = predict(Arsenic_xgb, newdata = AsTest[,215], type="prob")
#Predictions
y_pred = predict(Arsenic_xgb, newdata = AsTest[,207], type="prob")
#Predictions
y_pred = predict(Arsenic_xgb, newdata = AsTest, type="prob")
str(Asdata)
str(Arsenic_xgb)
#Load data
Asdata = read.csv("./01_data/CoPlateau_As/Cleaned_As_GIS_Filtered.csv",
na.strings = "NA") #Probably need to simplify the path so the script and data are in the same folder for the HPC
#Subset to test set
AsTest<-subset(Asdata, spl3cat==FALSE)
#Drop unused fields
AsTest<-AsTest[,-c(1:5,212:214,216:217)]
#Predictions
y_pred = predict(Arsenic_xgb, newdata = AsTest, type="prob")
#Load data
Asdata = read.csv("./01_data/CoPlateau_As/Cleaned_As_GIS_Filtered.csv",
na.strings = "NULL") #Probably need to simplify the path so the script and data are in the same folder for the HPC
#Subset to test set
AsTest<-subset(Asdata, spl3cat==FALSE)
#Drop unused fields
AsTest<-AsTest[,-c(1:5,212:214,216:217)]
#Predictions
y_pred = predict(Arsenic_xgb, newdata = AsTest, type="prob")
lean up the workspace
#Load data
#Asdata = read.csv("./01_data/CoPlateau_As/20240724_xgb_As_dataClean.csv",
#                  na.strings = "NA") #Probably need to simplify the path so the script and data are in the same folder for the HPC
Asdata = read.csv("./01_data/CoPlateau_As/Cleaned_As_GIS_Filtered.csv",
na.strings = "NULL")
#Clean up the workspace
rm(list=ls())
#Set some basic parameters
date<-Sys.Date()
set.seed(1234)  # Setting seed
#Load data
#Asdata = read.csv("./01_data/CoPlateau_As/20240724_xgb_As_dataClean.csv",
#                  na.strings = "NA") #Probably need to simplify the path so the script and data are in the same folder for the HPC
Asdata = read.csv("./01_data/CoPlateau_As/Cleaned_As_GIS_Filtered.csv",
na.strings = "NULL")
View(Asdata)
str(Asdata)
#Subset to training set
AsTrain<-subset(Asdata, spl3cat==TRUE)
#Drop unused fields for bas1 outcome
AsTrain<-AsTrain[,-c(1:5,212:214, 216:217)]
View(AsTrain)
View(AsTrain)
#Ensure bas1 is a Factor (Categorical Variable)
AsTrain$As3Cat <- as.factor(AsTrain$As3Cat)
#This model takes ~5 minutes to run on my laptop
model<-train(
factor(As3Cat) ~ .,
data = AsTrain,
metric = "Accuracy",
method = "xgbTree",
trControl = trainControl(method="cv", number = 5),
na.action = 'na.pass',
tuneGrid = expand.grid(
#nrounds = seq(from = 500, to = 2000, by = 500),
nrounds = 500,
max_depth = 10,
#max_depth = c(6, 8, 10),
#eta = c(0.01, 0.02),  #Shrinkage
eta = 0.01,  #Shrinkage
gamma = 0,
colsample_bytree = 0.75,
#colsample_bytree = c(0.5, 0.75),
min_child_weight = 1,
subsample = 0.5
#subsample = c(0.5, 0.75)
)
)
#This model takes ~5 minutes to run on my laptop
model<-train(
factor(As3Cat) ~ .,
data = AsTrain,
metric = "Accuracy",
method = "xgbTree",
trControl = trainControl(method="cv", number = 5, verboseIter = TRUE),
na.action = 'na.pass',
tuneGrid = expand.grid(
#nrounds = seq(from = 500, to = 2000, by = 500),
nrounds = 500,
max_depth = 10,
#max_depth = c(6, 8, 10),
#eta = c(0.01, 0.02),  #Shrinkage
eta = 0.01,  #Shrinkage
gamma = 0,
colsample_bytree = 0.75,
#colsample_bytree = c(0.5, 0.75),
min_child_weight = 1,
subsample = 0.5
#subsample = c(0.5, 0.75)
)
)
#This model takes ~5 minutes to run on my laptop
model<-train(
factor(As3Cat) ~ .,
data = AsTrain,
metric = "Accuracy",
method = "xgbTree",
trControl = trainControl(method="cv", number = 10, verboseIter = TRUE),
na.action = 'na.pass',
tuneGrid = expand.grid(
#nrounds = seq(from = 500, to = 2000, by = 500),
nrounds = 500,
max_depth = 10,
#max_depth = c(6, 8, 10),
#eta = c(0.01, 0.02),  #Shrinkage
eta = 0.01,  #Shrinkage
gamma = 0,
colsample_bytree = 0.75,
#colsample_bytree = c(0.5, 0.75),
min_child_weight = 1,
subsample = 0.5
#subsample = c(0.5, 0.75)
)
)
saveRDS(model, paste("./",date, "20240726_as_cv10_final_modelTuned_xgb.rds", sep=""))
#Clean up the workspace
rm(list=ls())
#Load RF model
Arsenic_xgb<-readRDS("./03_modelOutputs/03_xgb/20240726_as_cv10_final_modelTuned_xgb.rds")
#Load RF model
Arsenic_xgb<-readRDS("./03_modelOutputs/03_xgb/20240726_as_cv10_final_modelTuned_xgb.rds")
#Load RF model
Arsenic_xgb<-readRDS("./03_modelOutputs/03_xgb/20240726_as_cv10_final_modelTuned_xgb.rds")
#Load RF model
Arsenic_xgb<-readRDS("./03_modelOutputs/03_xgb/20240726_as_cv10_final_modelTuned_xgb.rds.rds")
#Load RF model
Arsenic_xgb<-readRDS("./03_modelOutputs/03_xgb/20240726_as_cv10_final_modelTuned_xgb.rds")
#Load data
Asdata = read.csv("./01_data/CoPlateau_As/Cleaned_As_GIS_Filtered.csv",
na.strings = "NULL") #Probably need to simplify the path so the script and data are in the same folder for the HPC
View(Asdata)
#Subset to test set
AsTest<-subset(Asdata, spl3cat==FALSE)
#Drop unused fields
AsTest<-AsTest[,-c(1:5,212:214,216:217)]
#Predictions
y_pred = predict(Arsenic_xgb, newdata = AsTest, type="prob")
View(AsTest)
View(y_pred)
#Clean up the workspace
rm(list=ls())
#Load RF model
Arsenic_xgb<-readRDS("./03_modelOutputs/03_xgb/20240726_as_cv10_final_modelTuned_xgb.rds")
#Load data
Asdata = read.csv("./01_data/CoPlateau_As/Cleaned_As_GIS_Filtered.csv",
na.strings = "NULL") #Probably need to simplify the path so the script and data are in the same folder for the HPC
#Subset to test set
AsTest<-subset(Asdata, spl3cat==FALSE)
#AsTest<-subset(Asdata, spl3cat==TRUE)
#Drop unused fields
AsTest<-AsTest[,-c(1:5,212:214,216:217)]
#Predictions
y_pred = predict(Arsenic_xgb, newdata = AsTest, type="prob")
confusionMatrix(y_pred, factor(AsTest[,207]))
str(AsTest$As3Cat)
str(factor(AsTest$As3Cat))
summary(factor(AsTest$As3Cat))
confusionMatrix(y_pred, factor(AsTest[,207]))
str(AsTest[,207])
#Predictions
y_pred = predict(Arsenic_xgb, newdata = AsTest, type="prob")
confusionMatrix(y_pred, factor(AsTest[,207]))
confusionMatrix(y_pred, AsTest)
confusionMatrix(y_pred, AsTest$As3Cat)
confusionMatrix(y_pred, factor(AsTest$As3Cat))
# Plotting model
plot(Arsenic_xgb)
# Plotting model
plot(Arsenic_xgb)
#Calculate variable importance
gbmImp <- varImp(Arsenic_xgb, scale=T)
gbmImp
#Plot variable importance
# - Variable importance
plot(gbmImp, top=20)
confusionMatrix(factor(AsTest$As3Cat), y_pred, )
confusionMatrix(factor(AsTest$As3Cat), y_pred)
table(actor(AsTest$As3Cat), y_pred)
y_pred = predict(Arsenic_xgb, newdata = AsTest)
confusionMatrix(factor(AsTest$As3Cat), y_pred)
length(y_pred)
?predict
y_pred = predict(Arsenic_xgb, newdata = AsTest, missing =="NULL")
y_pred = predict(Arsenic_xgb, newdata = AsTest, missing =="NULL")
y_pred = predict(Arsenic_xgb, newdata = AsTest, missing ="NULL")
y_pred = predict(Arsenic_xgb, newdata = AsTest, missing ="NULL"); length(y_pred)
View(AsTest)
AsTest2 <- AsTest[complete.cases(AsTest), ]
length(y_pred)
#Predictions
y_pred = predict(Arsenic_xgb, newdata = AsTest, type="prob")
y_pred = predict(Arsenic_xgb, newdata = AsTest, missing ="NULL"); length(y_pred)
#Drop unused fields
AsTest<-AsTest[,-c(1:4,212:214,216:217)]
AsTest2 <- AsTest[complete.cases(AsTest), ]
AsTest2 <- AsTest[complete.cases(AsTest), ]
#Clean up the workspace
rm(list=ls())
#Load RF model
Arsenic_xgb<-readRDS("./03_modelOutputs/03_xgb/20240726_as_cv10_final_modelTuned_xgb.rds")
#Load data
Asdata = read.csv("./01_data/CoPlateau_As/Cleaned_As_GIS_Filtered.csv",
na.strings = "NULL") #Probably need to simplify the path so the script and data are in the same folder for the HPC
#Subset to test set
AsTest<-subset(Asdata, spl3cat==FALSE)
#AsTest<-subset(Asdata, spl3cat==TRUE)
#Drop unused fields
AsTest2<-AsTest[,-c(1:4,212:214,216:217)]
View(AsTest2)
AsTest3 <- AsTest2[complete.cases(AsTest2), ]
View(AsTest3)
#Predictions
y_pred = predict(Arsenic_xgb, newdata = AsTest[,-1], type="prob")
#Predictions
y_pred = predict(Arsenic_xgb, newdata = AsTest3[,-1], type="prob")
y_pred = predict(Arsenic_xgb, newdata = AsTest3[,-1], missing ="NULL"); length(y_pred)
confusionMatrix(factor(AsTest$As3Cat), y_pred)
confusionMatrix(factor(AsTest3$As3Cat), y_pred)
# Plotting model
plot(Arsenic_xgb)
#Calculate variable importance
gbmImp <- varImp(Arsenic_xgb, scale=T)
gbmImp
#Plot variable importance
# - Variable importance
plot(gbmImp, top=20)
#Plot variable importance
# - Variable importance
plot(gbmImp, top=10)
View(Asdata)
#Write predictions to file for mapping
a<-merge(Asdata[,c(1:5)], y_pred)
#Write predictions to file for mapping
a<-merge(AsTest3[,c(1:3)], y_pred)
#Write predictions to file for mapping
a<-cbind(AsTest3[,c(1:3)], y_pred)
View(a)
#Predictions
y_pred2 = predict(Arsenic_xgb, newdata = AsTest3[,-1], type="prob")
#Write predictions to file for mapping
a<-cbind(AsTest3[,c(1:3)], y_pred, y_pred2)
View(a)
b<-merge(Asdata[,c(1:5)], a, by="SiteID")
View(b)
#Clean up the workspace
rm(list=ls())
#Load RF model
Arsenic_xgb<-readRDS("./03_modelOutputs/03_xgb/20240726_as_cv10_final_modelTuned_xgb.rds")
#Load data
Asdata = read.csv("./01_data/CoPlateau_As/Cleaned_As_GIS_Filtered.csv",
na.strings = "NULL") #Probably need to simplify the path so the script and data are in the same folder for the HPC
#Subset to test set
AsTest<-subset(Asdata, spl3cat==FALSE)
#AsTest<-subset(Asdata, spl3cat==TRUE)
#Drop unused fields
AsTest2<-AsTest[,-c(212:214,216:217)]
View(AsTest2)
AsTest3 <- AsTest2[complete.cases(AsTest2[,c(6:212)]), ]
#Predictions
y_pred2 = predict(Arsenic_xgb, newdata = AsTest3[,-1], type="prob")
y_pred = predict(Arsenic_xgb, newdata = AsTest3[,-1], missing ="NULL"); length(y_pred)
#Write predictions to file for mapping
a<-cbind(AsTest3[,c(1:3)], y_pred, y_pred2)
View(a)
#Write predictions to file for mapping
a<-cbind(AsTest3[,c(1:5)], y_pred, y_pred2)
View(a)
write.csv(a, "20240726_wellPredictions_forMapping_xgb.csv")
Arsenic_xgb
Arsenic_rf<-readRDS("./03_modelOutputs/02_randomForest/2024-07-25_rf.rds")
Arsenic_rf<-readRDS("./03_modelOutputs/01_randomForest/2024-07-25_rf.rds")
Arsenic_brt<-readRDS("./03_modelOutputs/02_brt/2024-07-25_as_brt.rds")
Arsenic_brt<-readRDS("./03_modelOutputs/02_boostedRegTree/2024-07-25_as_brt.rds")
Arsenic_brt<-readRDS("./03_modelOutputs/02_boostedRegTrees/2024-07-25_as_brt.rds")
Arsenic_rf
Arsenic_brt
Arsenic_brt$resample %>%
arrange(resample)
Arsenic_brt$resample %>%
arrange(resample)
Arsenic_brt$resample
Arsenic_brt$resample %>%
arrange(Resample)
Arsenic_brt$resample %>%
arrange(Resample) %>%
summarise (AvgAccuracy = mean(Accuracy))
Arsenic_brt$resample %>%
arrange(Resample) %>%
summarise (AvgAccuracy = mean(Accuracy)) %>%
summarise (AvgKappa = mean(Kappa))
arrange(Resample)
Arsenic_brt$resample
Arsenic_brt$resample %>%
arrange(Resample) %>%
summarise (AvgAccuracy = mean(Accuracy)) %>%
summarise (AvgKappa = mean(kappa))
Arsenic_brt$resample %>%
arrange(Resample) %>%
summarise (AvgAccuracy = mean(Accuracy)) %>%
summarise (AvgKappa = mean(kappa))
Arsenic_brt$resample
Arsenic_brt$resample
str(Arsenic_brt$resample)
Arsenic_brt$resample %>%
arrange(Resample) %>%
mutate (AvgAccuracy = mean(Accuracy)) %>%
mutate (AvgKappa = mean(Kappa))
View(a)
write.csv(a, "20240726_wellPredictions_2_forMapping_xgb.csv")
setwd("/Users/hoover/Documents/GitHub/coPlateauWaterQuality/")
#setwd("/Users/austinmartinez/Documents/GitHub/coPlateauWaterQuality/01_data")
#Clean up the workspace
rm(list=ls())
#Set some basic parameters
date<-Sys.Date()
set.seed(1234)  # Setting seed
#Load data
#Asdata = read.csv("./01_data/CoPlateau_As/20240724_xgb_As_dataClean.csv",
#                  na.strings = "NA") #Probably need to simplify the path so the script and data are in the same folder for the HPC
Asdata = read.csv("./01_data/CoPlateau_As/Cleaned_As_GIS_Filtered.csv",
na.strings = "NULL")
#Subset to training set
AsTrain<-subset(Asdata, spl3cat==TRUE)
#Drop unused fields for bas1 outcome
AsTrain<-AsTrain[,-c(1:5,212:214, 216:217)]
#Ensure bas1 is a Factor (Categorical Variable)
AsTrain$As3Cat <- as.factor(AsTrain$As3Cat)
?trControl
?trainControl
#Clean up the workspace
rm(list=ls())
#Load RF model
Arsenic_boost<-readRDS("2024-07-23cv3_final_model_brt.rds")
#Clean up the workspace
rm(list=ls())
#Load RF model
Arsenic_xgb<-readRDS("./03_modelOutputs/03_xgb/20240726_as_cv10_final_modelTuned_xgb.rds")
#Clean up the workspace
rm(list=ls())
#Set some basic parameters
date<-Sys.Date()
set.seed(1234)  # Setting seed
#Load data
#Asdata = read.csv("./01_data/CoPlateau_As/20240724_xgb_As_dataClean.csv",
#                  na.strings = "NA") #Probably need to simplify the path so the script and data are in the same folder for the HPC
Asdata = read.csv("./01_data/CoPlateau_As/Cleaned_As_GIS_Filtered.csv",
na.strings = "NULL")
#Subset to training set
AsTrain<-subset(Asdata, spl3cat==TRUE)
#Drop unused fields for bas1 outcome
AsTrain<-AsTrain[,-c(1:5,212:214, 216:217)]
#Ensure bas1 is a Factor (Categorical Variable)
AsTrain$As3Cat <- as.factor(AsTrain$As3Cat)
#This model takes ~5 minutes to run on my laptop
model<-train(
factor(As3Cat) ~ .,
data = AsTrain,
metric = "Accuracy",
method = "xgbTree",
trControl = trainControl(method="cv", number = 2, verboseIter = TRUE, early_stopping_rounds=2),
na.action = 'na.pass',
tuneGrid = expand.grid(
#nrounds = seq(from = 500, to = 2000, by = 500),
nrounds = 510,
max_depth = 10,
#max_depth = c(6, 8, 10),
#eta = c(0.01, 0.02),  #Shrinkage
eta = 0.01,  #Shrinkage
gamma = 0,
colsample_bytree = 0.75,
#colsample_bytree = c(0.5, 0.75),
min_child_weight = 1,
subsample = 0.5
#subsample = c(0.5, 0.75)
)
)
#This model takes ~5 minutes to run on my laptop
model<-train(
factor(As3Cat) ~ .,
data = AsTrain,
metric = "Accuracy",
method = "xgbTree",
early_stopping_rounds=2,
trControl = trainControl(method="cv", number = 2, verboseIter = TRUE, ),
na.action = 'na.pass',
tuneGrid = expand.grid(
#nrounds = seq(from = 500, to = 2000, by = 500),
nrounds = 510,
max_depth = 10,
#max_depth = c(6, 8, 10),
#eta = c(0.01, 0.02),  #Shrinkage
eta = 0.01,  #Shrinkage
gamma = 0,
colsample_bytree = 0.75,
#colsample_bytree = c(0.5, 0.75),
min_child_weight = 1,
subsample = 0.5
#subsample = c(0.5, 0.75)
)
)
#This model takes ~5 minutes to run on my laptop
model<-train(
factor(As3Cat) ~ .,
data = AsTrain,
metric = "Accuracy",
method = "xgbTree",
early_stopping_rounds=10,
trControl = trainControl(method="cv", number = 2, verboseIter = TRUE, ),
na.action = 'na.pass',
tuneGrid = expand.grid(
#nrounds = seq(from = 500, to = 2000, by = 500),
nrounds = 100,
max_depth = 10,
#max_depth = c(6, 8, 10),
#eta = c(0.01, 0.02),  #Shrinkage
eta = 0.01,  #Shrinkage
gamma = 0,
colsample_bytree = 0.75,
#colsample_bytree = c(0.5, 0.75),
min_child_weight = 1,
subsample = 0.5
#subsample = c(0.5, 0.75)
)
)
?train
wlist = list(train = Train)
wlist = list(train = AsTrain)
#This model takes ~5 minutes to run on my laptop
model<-train(
factor(As3Cat) ~ .,
data = AsTrain,
metric = "Accuracy",
method = "xgbTree",
early_stopping_rounds=10,
whatchlist = wlist
trControl = trainControl(method="cv", number = 2, verboseIter = TRUE, ),
#This model takes ~5 minutes to run on my laptop
model<-train(
factor(As3Cat) ~ .,
data = AsTrain,
metric = "Accuracy",
method = "xgbTree",
early_stopping_rounds=10,
watchlist = wlist,
trControl = trainControl(method="cv", number = 2, verboseIter = TRUE, ),
na.action = 'na.pass',
tuneGrid = expand.grid(
#nrounds = seq(from = 500, to = 2000, by = 500),
nrounds = 100,
max_depth = 10,
#max_depth = c(6, 8, 10),
#eta = c(0.01, 0.02),  #Shrinkage
eta = 0.01,  #Shrinkage
gamma = 0,
colsample_bytree = 0.75,
#colsample_bytree = c(0.5, 0.75),
min_child_weight = 1,
subsample = 0.5
#subsample = c(0.5, 0.75)
)
)
#This model takes ~5 minutes to run on my laptop
model<-train(
factor(As3Cat) ~ .,
data = AsTrain,
metric = "Accuracy",
method = "xgbTree",
early_stopping_rounds=10,
trControl = trainControl(method="cv", number = 2, verboseIter = TRUE, ),
na.action = 'na.pass',
tuneGrid = expand.grid(
#nrounds = seq(from = 500, to = 2000, by = 500),
nrounds = 100,
max_depth = 10,
#max_depth = c(6, 8, 10),
#eta = c(0.01, 0.02),  #Shrinkage
eta = 0.01,  #Shrinkage
gamma = 0,
colsample_bytree = 0.75,
#colsample_bytree = c(0.5, 0.75),
min_child_weight = 1,
subsample = 0.5
#subsample = c(0.5, 0.75)
)
)
wlist = list(train = AsTrain)
